
phone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c44  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08003d50  08003d50  00013d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e28  08003e28  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003e28  08003e28  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e28  08003e28  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e28  08003e28  00013e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e2c  08003e2c  00013e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003e30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  20000010  08003e40  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  08003e40  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c928  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ea3  00000000  00000000  0002c9a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ce8  00000000  00000000  0002e848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a18  00000000  00000000  0002f530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000179bf  00000000  00000000  0002ff48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e991  00000000  00000000  00047907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00089fc4  00000000  00000000  00056298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000035f0  00000000  00000000  000e025c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000e384c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08003d38 	.word	0x08003d38

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08003d38 	.word	0x08003d38

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <Keypad_Get_Char>:
                         {'4','5','6','B'},
                         {'7','8','9','C'},
                         {'*','0','#','D'}};

char Keypad_Get_Char(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
	val_key = 0;
 8000160:	4bc9      	ldr	r3, [pc, #804]	; (8000488 <Keypad_Get_Char+0x32c>)
 8000162:	2200      	movs	r2, #0
 8000164:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(r1_GPIO_Port, r1_Pin, GPIO_PIN_RESET);
 8000166:	2200      	movs	r2, #0
 8000168:	f44f 7100 	mov.w	r1, #512	; 0x200
 800016c:	48c7      	ldr	r0, [pc, #796]	; (800048c <Keypad_Get_Char+0x330>)
 800016e:	f001 fe12 	bl	8001d96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(r2_GPIO_Port, r2_Pin, GPIO_PIN_SET);
 8000172:	2201      	movs	r2, #1
 8000174:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000178:	48c4      	ldr	r0, [pc, #784]	; (800048c <Keypad_Get_Char+0x330>)
 800017a:	f001 fe0c 	bl	8001d96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(r3_GPIO_Port, r3_Pin, GPIO_PIN_SET);
 800017e:	2201      	movs	r2, #1
 8000180:	2180      	movs	r1, #128	; 0x80
 8000182:	48c2      	ldr	r0, [pc, #776]	; (800048c <Keypad_Get_Char+0x330>)
 8000184:	f001 fe07 	bl	8001d96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(r4_GPIO_Port, r4_Pin, GPIO_PIN_SET);
 8000188:	2201      	movs	r2, #1
 800018a:	2140      	movs	r1, #64	; 0x40
 800018c:	48bf      	ldr	r0, [pc, #764]	; (800048c <Keypad_Get_Char+0x330>)
 800018e:	f001 fe02 	bl	8001d96 <HAL_GPIO_WritePin>

	if(!(HAL_GPIO_ReadPin(c1_GPIO_Port, c1_Pin))){
 8000192:	2120      	movs	r1, #32
 8000194:	48bd      	ldr	r0, [pc, #756]	; (800048c <Keypad_Get_Char+0x330>)
 8000196:	f001 fde7 	bl	8001d68 <HAL_GPIO_ReadPin>
 800019a:	4603      	mov	r3, r0
 800019c:	2b00      	cmp	r3, #0
 800019e:	d110      	bne.n	80001c2 <Keypad_Get_Char+0x66>
		HAL_Delay(4);
 80001a0:	2004      	movs	r0, #4
 80001a2:	f001 fa79 	bl	8001698 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin (c1_GPIO_Port, c1_Pin)));
 80001a6:	bf00      	nop
 80001a8:	2120      	movs	r1, #32
 80001aa:	48b8      	ldr	r0, [pc, #736]	; (800048c <Keypad_Get_Char+0x330>)
 80001ac:	f001 fddc 	bl	8001d68 <HAL_GPIO_ReadPin>
 80001b0:	4603      	mov	r3, r0
 80001b2:	2b00      	cmp	r3, #0
 80001b4:	d0f8      	beq.n	80001a8 <Keypad_Get_Char+0x4c>
		HAL_Delay(4);
 80001b6:	2004      	movs	r0, #4
 80001b8:	f001 fa6e 	bl	8001698 <HAL_Delay>
		val_key = keys[0][0];
 80001bc:	2231      	movs	r2, #49	; 0x31
 80001be:	4bb2      	ldr	r3, [pc, #712]	; (8000488 <Keypad_Get_Char+0x32c>)
 80001c0:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(c2_GPIO_Port, c2_Pin))){
 80001c2:	2110      	movs	r1, #16
 80001c4:	48b1      	ldr	r0, [pc, #708]	; (800048c <Keypad_Get_Char+0x330>)
 80001c6:	f001 fdcf 	bl	8001d68 <HAL_GPIO_ReadPin>
 80001ca:	4603      	mov	r3, r0
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d110      	bne.n	80001f2 <Keypad_Get_Char+0x96>
		HAL_Delay(4);
 80001d0:	2004      	movs	r0, #4
 80001d2:	f001 fa61 	bl	8001698 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(c2_GPIO_Port, c2_Pin)));
 80001d6:	bf00      	nop
 80001d8:	2110      	movs	r1, #16
 80001da:	48ac      	ldr	r0, [pc, #688]	; (800048c <Keypad_Get_Char+0x330>)
 80001dc:	f001 fdc4 	bl	8001d68 <HAL_GPIO_ReadPin>
 80001e0:	4603      	mov	r3, r0
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d0f8      	beq.n	80001d8 <Keypad_Get_Char+0x7c>
		HAL_Delay(4);
 80001e6:	2004      	movs	r0, #4
 80001e8:	f001 fa56 	bl	8001698 <HAL_Delay>
		val_key = keys[0][1];
 80001ec:	2232      	movs	r2, #50	; 0x32
 80001ee:	4ba6      	ldr	r3, [pc, #664]	; (8000488 <Keypad_Get_Char+0x32c>)
 80001f0:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(c3_GPIO_Port, c3_Pin))){
 80001f2:	2108      	movs	r1, #8
 80001f4:	48a5      	ldr	r0, [pc, #660]	; (800048c <Keypad_Get_Char+0x330>)
 80001f6:	f001 fdb7 	bl	8001d68 <HAL_GPIO_ReadPin>
 80001fa:	4603      	mov	r3, r0
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d110      	bne.n	8000222 <Keypad_Get_Char+0xc6>
		HAL_Delay(4);
 8000200:	2004      	movs	r0, #4
 8000202:	f001 fa49 	bl	8001698 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(c3_GPIO_Port, c3_Pin)));
 8000206:	bf00      	nop
 8000208:	2108      	movs	r1, #8
 800020a:	48a0      	ldr	r0, [pc, #640]	; (800048c <Keypad_Get_Char+0x330>)
 800020c:	f001 fdac 	bl	8001d68 <HAL_GPIO_ReadPin>
 8000210:	4603      	mov	r3, r0
 8000212:	2b00      	cmp	r3, #0
 8000214:	d0f8      	beq.n	8000208 <Keypad_Get_Char+0xac>
		HAL_Delay(4);
 8000216:	2004      	movs	r0, #4
 8000218:	f001 fa3e 	bl	8001698 <HAL_Delay>
		val_key = keys[0][2];
 800021c:	2233      	movs	r2, #51	; 0x33
 800021e:	4b9a      	ldr	r3, [pc, #616]	; (8000488 <Keypad_Get_Char+0x32c>)
 8000220:	701a      	strb	r2, [r3, #0]
	}
	if (!(HAL_GPIO_ReadPin(c4_GPIO_Port, c4_Pin))){
 8000222:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000226:	489a      	ldr	r0, [pc, #616]	; (8000490 <Keypad_Get_Char+0x334>)
 8000228:	f001 fd9e 	bl	8001d68 <HAL_GPIO_ReadPin>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d111      	bne.n	8000256 <Keypad_Get_Char+0xfa>
		HAL_Delay(4);
 8000232:	2004      	movs	r0, #4
 8000234:	f001 fa30 	bl	8001698 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(c4_GPIO_Port, c4_Pin)));
 8000238:	bf00      	nop
 800023a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800023e:	4894      	ldr	r0, [pc, #592]	; (8000490 <Keypad_Get_Char+0x334>)
 8000240:	f001 fd92 	bl	8001d68 <HAL_GPIO_ReadPin>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d0f7      	beq.n	800023a <Keypad_Get_Char+0xde>
		HAL_Delay(4);
 800024a:	2004      	movs	r0, #4
 800024c:	f001 fa24 	bl	8001698 <HAL_Delay>
		val_key = keys[0][3];
 8000250:	2241      	movs	r2, #65	; 0x41
 8000252:	4b8d      	ldr	r3, [pc, #564]	; (8000488 <Keypad_Get_Char+0x32c>)
 8000254:	701a      	strb	r2, [r3, #0]
	}

	HAL_GPIO_WritePin(r1_GPIO_Port, r1_Pin, GPIO_PIN_SET);
 8000256:	2201      	movs	r2, #1
 8000258:	f44f 7100 	mov.w	r1, #512	; 0x200
 800025c:	488b      	ldr	r0, [pc, #556]	; (800048c <Keypad_Get_Char+0x330>)
 800025e:	f001 fd9a 	bl	8001d96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(r2_GPIO_Port, r2_Pin, GPIO_PIN_RESET);
 8000262:	2200      	movs	r2, #0
 8000264:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000268:	4888      	ldr	r0, [pc, #544]	; (800048c <Keypad_Get_Char+0x330>)
 800026a:	f001 fd94 	bl	8001d96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(r3_GPIO_Port, r3_Pin, GPIO_PIN_SET);
 800026e:	2201      	movs	r2, #1
 8000270:	2180      	movs	r1, #128	; 0x80
 8000272:	4886      	ldr	r0, [pc, #536]	; (800048c <Keypad_Get_Char+0x330>)
 8000274:	f001 fd8f 	bl	8001d96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(r4_GPIO_Port, r4_Pin, GPIO_PIN_SET);
 8000278:	2201      	movs	r2, #1
 800027a:	2140      	movs	r1, #64	; 0x40
 800027c:	4883      	ldr	r0, [pc, #524]	; (800048c <Keypad_Get_Char+0x330>)
 800027e:	f001 fd8a 	bl	8001d96 <HAL_GPIO_WritePin>

	if(!(HAL_GPIO_ReadPin(c1_GPIO_Port, c1_Pin))){
 8000282:	2120      	movs	r1, #32
 8000284:	4881      	ldr	r0, [pc, #516]	; (800048c <Keypad_Get_Char+0x330>)
 8000286:	f001 fd6f 	bl	8001d68 <HAL_GPIO_ReadPin>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d110      	bne.n	80002b2 <Keypad_Get_Char+0x156>
		HAL_Delay(4);
 8000290:	2004      	movs	r0, #4
 8000292:	f001 fa01 	bl	8001698 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(c1_GPIO_Port, c1_Pin)));
 8000296:	bf00      	nop
 8000298:	2120      	movs	r1, #32
 800029a:	487c      	ldr	r0, [pc, #496]	; (800048c <Keypad_Get_Char+0x330>)
 800029c:	f001 fd64 	bl	8001d68 <HAL_GPIO_ReadPin>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d0f8      	beq.n	8000298 <Keypad_Get_Char+0x13c>
		HAL_Delay(4);
 80002a6:	2004      	movs	r0, #4
 80002a8:	f001 f9f6 	bl	8001698 <HAL_Delay>
		val_key = keys[1][0];
 80002ac:	2234      	movs	r2, #52	; 0x34
 80002ae:	4b76      	ldr	r3, [pc, #472]	; (8000488 <Keypad_Get_Char+0x32c>)
 80002b0:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(c2_GPIO_Port, c2_Pin))){
 80002b2:	2110      	movs	r1, #16
 80002b4:	4875      	ldr	r0, [pc, #468]	; (800048c <Keypad_Get_Char+0x330>)
 80002b6:	f001 fd57 	bl	8001d68 <HAL_GPIO_ReadPin>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d110      	bne.n	80002e2 <Keypad_Get_Char+0x186>
		HAL_Delay(4);
 80002c0:	2004      	movs	r0, #4
 80002c2:	f001 f9e9 	bl	8001698 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(c2_GPIO_Port, c2_Pin)));
 80002c6:	bf00      	nop
 80002c8:	2110      	movs	r1, #16
 80002ca:	4870      	ldr	r0, [pc, #448]	; (800048c <Keypad_Get_Char+0x330>)
 80002cc:	f001 fd4c 	bl	8001d68 <HAL_GPIO_ReadPin>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d0f8      	beq.n	80002c8 <Keypad_Get_Char+0x16c>
		HAL_Delay(4);
 80002d6:	2004      	movs	r0, #4
 80002d8:	f001 f9de 	bl	8001698 <HAL_Delay>
		val_key = keys[1][1];
 80002dc:	2235      	movs	r2, #53	; 0x35
 80002de:	4b6a      	ldr	r3, [pc, #424]	; (8000488 <Keypad_Get_Char+0x32c>)
 80002e0:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(c3_GPIO_Port, c3_Pin))){
 80002e2:	2108      	movs	r1, #8
 80002e4:	4869      	ldr	r0, [pc, #420]	; (800048c <Keypad_Get_Char+0x330>)
 80002e6:	f001 fd3f 	bl	8001d68 <HAL_GPIO_ReadPin>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d110      	bne.n	8000312 <Keypad_Get_Char+0x1b6>
		HAL_Delay(4);
 80002f0:	2004      	movs	r0, #4
 80002f2:	f001 f9d1 	bl	8001698 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(c3_GPIO_Port, c3_Pin)));
 80002f6:	bf00      	nop
 80002f8:	2108      	movs	r1, #8
 80002fa:	4864      	ldr	r0, [pc, #400]	; (800048c <Keypad_Get_Char+0x330>)
 80002fc:	f001 fd34 	bl	8001d68 <HAL_GPIO_ReadPin>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d0f8      	beq.n	80002f8 <Keypad_Get_Char+0x19c>
		HAL_Delay(4);
 8000306:	2004      	movs	r0, #4
 8000308:	f001 f9c6 	bl	8001698 <HAL_Delay>
		val_key = keys[1][2];
 800030c:	2236      	movs	r2, #54	; 0x36
 800030e:	4b5e      	ldr	r3, [pc, #376]	; (8000488 <Keypad_Get_Char+0x32c>)
 8000310:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(c4_GPIO_Port, c4_Pin))){
 8000312:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000316:	485e      	ldr	r0, [pc, #376]	; (8000490 <Keypad_Get_Char+0x334>)
 8000318:	f001 fd26 	bl	8001d68 <HAL_GPIO_ReadPin>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d111      	bne.n	8000346 <Keypad_Get_Char+0x1ea>
		HAL_Delay(4);
 8000322:	2004      	movs	r0, #4
 8000324:	f001 f9b8 	bl	8001698 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(c4_GPIO_Port, c4_Pin)));
 8000328:	bf00      	nop
 800032a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800032e:	4858      	ldr	r0, [pc, #352]	; (8000490 <Keypad_Get_Char+0x334>)
 8000330:	f001 fd1a 	bl	8001d68 <HAL_GPIO_ReadPin>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d0f7      	beq.n	800032a <Keypad_Get_Char+0x1ce>
		HAL_Delay(4);
 800033a:	2004      	movs	r0, #4
 800033c:	f001 f9ac 	bl	8001698 <HAL_Delay>
		val_key = keys[1][3];
 8000340:	2242      	movs	r2, #66	; 0x42
 8000342:	4b51      	ldr	r3, [pc, #324]	; (8000488 <Keypad_Get_Char+0x32c>)
 8000344:	701a      	strb	r2, [r3, #0]
	}

	HAL_GPIO_WritePin(r1_GPIO_Port, r1_Pin, GPIO_PIN_SET);
 8000346:	2201      	movs	r2, #1
 8000348:	f44f 7100 	mov.w	r1, #512	; 0x200
 800034c:	484f      	ldr	r0, [pc, #316]	; (800048c <Keypad_Get_Char+0x330>)
 800034e:	f001 fd22 	bl	8001d96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(r2_GPIO_Port, r2_Pin, GPIO_PIN_SET);
 8000352:	2201      	movs	r2, #1
 8000354:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000358:	484c      	ldr	r0, [pc, #304]	; (800048c <Keypad_Get_Char+0x330>)
 800035a:	f001 fd1c 	bl	8001d96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(r3_GPIO_Port, r3_Pin, GPIO_PIN_RESET);
 800035e:	2200      	movs	r2, #0
 8000360:	2180      	movs	r1, #128	; 0x80
 8000362:	484a      	ldr	r0, [pc, #296]	; (800048c <Keypad_Get_Char+0x330>)
 8000364:	f001 fd17 	bl	8001d96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(r4_GPIO_Port, r4_Pin, GPIO_PIN_SET);
 8000368:	2201      	movs	r2, #1
 800036a:	2140      	movs	r1, #64	; 0x40
 800036c:	4847      	ldr	r0, [pc, #284]	; (800048c <Keypad_Get_Char+0x330>)
 800036e:	f001 fd12 	bl	8001d96 <HAL_GPIO_WritePin>

	if(!(HAL_GPIO_ReadPin(c1_GPIO_Port, c1_Pin))){
 8000372:	2120      	movs	r1, #32
 8000374:	4845      	ldr	r0, [pc, #276]	; (800048c <Keypad_Get_Char+0x330>)
 8000376:	f001 fcf7 	bl	8001d68 <HAL_GPIO_ReadPin>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d110      	bne.n	80003a2 <Keypad_Get_Char+0x246>
		HAL_Delay(4);
 8000380:	2004      	movs	r0, #4
 8000382:	f001 f989 	bl	8001698 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(c1_GPIO_Port, c1_Pin)));
 8000386:	bf00      	nop
 8000388:	2120      	movs	r1, #32
 800038a:	4840      	ldr	r0, [pc, #256]	; (800048c <Keypad_Get_Char+0x330>)
 800038c:	f001 fcec 	bl	8001d68 <HAL_GPIO_ReadPin>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d0f8      	beq.n	8000388 <Keypad_Get_Char+0x22c>
		HAL_Delay(4);
 8000396:	2004      	movs	r0, #4
 8000398:	f001 f97e 	bl	8001698 <HAL_Delay>
		val_key = keys[2][0];
 800039c:	2237      	movs	r2, #55	; 0x37
 800039e:	4b3a      	ldr	r3, [pc, #232]	; (8000488 <Keypad_Get_Char+0x32c>)
 80003a0:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(c2_GPIO_Port, c2_Pin))){
 80003a2:	2110      	movs	r1, #16
 80003a4:	4839      	ldr	r0, [pc, #228]	; (800048c <Keypad_Get_Char+0x330>)
 80003a6:	f001 fcdf 	bl	8001d68 <HAL_GPIO_ReadPin>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d110      	bne.n	80003d2 <Keypad_Get_Char+0x276>
		HAL_Delay(4);
 80003b0:	2004      	movs	r0, #4
 80003b2:	f001 f971 	bl	8001698 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(c2_GPIO_Port, c2_Pin)));
 80003b6:	bf00      	nop
 80003b8:	2110      	movs	r1, #16
 80003ba:	4834      	ldr	r0, [pc, #208]	; (800048c <Keypad_Get_Char+0x330>)
 80003bc:	f001 fcd4 	bl	8001d68 <HAL_GPIO_ReadPin>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d0f8      	beq.n	80003b8 <Keypad_Get_Char+0x25c>
		HAL_Delay(4);
 80003c6:	2004      	movs	r0, #4
 80003c8:	f001 f966 	bl	8001698 <HAL_Delay>
		val_key = keys[2][1];
 80003cc:	2238      	movs	r2, #56	; 0x38
 80003ce:	4b2e      	ldr	r3, [pc, #184]	; (8000488 <Keypad_Get_Char+0x32c>)
 80003d0:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(c3_GPIO_Port, c3_Pin))){
 80003d2:	2108      	movs	r1, #8
 80003d4:	482d      	ldr	r0, [pc, #180]	; (800048c <Keypad_Get_Char+0x330>)
 80003d6:	f001 fcc7 	bl	8001d68 <HAL_GPIO_ReadPin>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d110      	bne.n	8000402 <Keypad_Get_Char+0x2a6>
		HAL_Delay(4);
 80003e0:	2004      	movs	r0, #4
 80003e2:	f001 f959 	bl	8001698 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(c3_GPIO_Port, c3_Pin)));
 80003e6:	bf00      	nop
 80003e8:	2108      	movs	r1, #8
 80003ea:	4828      	ldr	r0, [pc, #160]	; (800048c <Keypad_Get_Char+0x330>)
 80003ec:	f001 fcbc 	bl	8001d68 <HAL_GPIO_ReadPin>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d0f8      	beq.n	80003e8 <Keypad_Get_Char+0x28c>
		HAL_Delay(4);
 80003f6:	2004      	movs	r0, #4
 80003f8:	f001 f94e 	bl	8001698 <HAL_Delay>
		val_key = keys[2][2];
 80003fc:	2239      	movs	r2, #57	; 0x39
 80003fe:	4b22      	ldr	r3, [pc, #136]	; (8000488 <Keypad_Get_Char+0x32c>)
 8000400:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin (c4_GPIO_Port, c4_Pin))){
 8000402:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000406:	4822      	ldr	r0, [pc, #136]	; (8000490 <Keypad_Get_Char+0x334>)
 8000408:	f001 fcae 	bl	8001d68 <HAL_GPIO_ReadPin>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d111      	bne.n	8000436 <Keypad_Get_Char+0x2da>
		HAL_Delay(4);
 8000412:	2004      	movs	r0, #4
 8000414:	f001 f940 	bl	8001698 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(c4_GPIO_Port, c4_Pin)));
 8000418:	bf00      	nop
 800041a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800041e:	481c      	ldr	r0, [pc, #112]	; (8000490 <Keypad_Get_Char+0x334>)
 8000420:	f001 fca2 	bl	8001d68 <HAL_GPIO_ReadPin>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d0f7      	beq.n	800041a <Keypad_Get_Char+0x2be>
		HAL_Delay(4);
 800042a:	2004      	movs	r0, #4
 800042c:	f001 f934 	bl	8001698 <HAL_Delay>
		val_key = keys[2][3];
 8000430:	2243      	movs	r2, #67	; 0x43
 8000432:	4b15      	ldr	r3, [pc, #84]	; (8000488 <Keypad_Get_Char+0x32c>)
 8000434:	701a      	strb	r2, [r3, #0]
	}

	HAL_GPIO_WritePin(r1_GPIO_Port, r1_Pin, GPIO_PIN_SET);
 8000436:	2201      	movs	r2, #1
 8000438:	f44f 7100 	mov.w	r1, #512	; 0x200
 800043c:	4813      	ldr	r0, [pc, #76]	; (800048c <Keypad_Get_Char+0x330>)
 800043e:	f001 fcaa 	bl	8001d96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(r2_GPIO_Port, r2_Pin, GPIO_PIN_SET);
 8000442:	2201      	movs	r2, #1
 8000444:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000448:	4810      	ldr	r0, [pc, #64]	; (800048c <Keypad_Get_Char+0x330>)
 800044a:	f001 fca4 	bl	8001d96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(r3_GPIO_Port, r3_Pin, GPIO_PIN_SET);
 800044e:	2201      	movs	r2, #1
 8000450:	2180      	movs	r1, #128	; 0x80
 8000452:	480e      	ldr	r0, [pc, #56]	; (800048c <Keypad_Get_Char+0x330>)
 8000454:	f001 fc9f 	bl	8001d96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(r4_GPIO_Port, r4_Pin, GPIO_PIN_RESET);
 8000458:	2200      	movs	r2, #0
 800045a:	2140      	movs	r1, #64	; 0x40
 800045c:	480b      	ldr	r0, [pc, #44]	; (800048c <Keypad_Get_Char+0x330>)
 800045e:	f001 fc9a 	bl	8001d96 <HAL_GPIO_WritePin>

	if(!(HAL_GPIO_ReadPin(c1_GPIO_Port, c1_Pin))){
 8000462:	2120      	movs	r1, #32
 8000464:	4809      	ldr	r0, [pc, #36]	; (800048c <Keypad_Get_Char+0x330>)
 8000466:	f001 fc7f 	bl	8001d68 <HAL_GPIO_ReadPin>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d118      	bne.n	80004a2 <Keypad_Get_Char+0x346>
		HAL_Delay(4);
 8000470:	2004      	movs	r0, #4
 8000472:	f001 f911 	bl	8001698 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(c1_GPIO_Port, c1_Pin)));
 8000476:	bf00      	nop
 8000478:	2120      	movs	r1, #32
 800047a:	4804      	ldr	r0, [pc, #16]	; (800048c <Keypad_Get_Char+0x330>)
 800047c:	f001 fc74 	bl	8001d68 <HAL_GPIO_ReadPin>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	e006      	b.n	8000494 <Keypad_Get_Char+0x338>
 8000486:	bf00      	nop
 8000488:	2000002c 	.word	0x2000002c
 800048c:	40010c00 	.word	0x40010c00
 8000490:	40010800 	.word	0x40010800
 8000494:	d0f0      	beq.n	8000478 <Keypad_Get_Char+0x31c>
		HAL_Delay(4);
 8000496:	2004      	movs	r0, #4
 8000498:	f001 f8fe 	bl	8001698 <HAL_Delay>
		val_key = keys[3][0];
 800049c:	222a      	movs	r2, #42	; 0x2a
 800049e:	4b28      	ldr	r3, [pc, #160]	; (8000540 <Keypad_Get_Char+0x3e4>)
 80004a0:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(c2_GPIO_Port, c2_Pin))){
 80004a2:	2110      	movs	r1, #16
 80004a4:	4827      	ldr	r0, [pc, #156]	; (8000544 <Keypad_Get_Char+0x3e8>)
 80004a6:	f001 fc5f 	bl	8001d68 <HAL_GPIO_ReadPin>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d110      	bne.n	80004d2 <Keypad_Get_Char+0x376>
		HAL_Delay(4);
 80004b0:	2004      	movs	r0, #4
 80004b2:	f001 f8f1 	bl	8001698 <HAL_Delay>
		while (!(HAL_GPIO_ReadPin(c2_GPIO_Port, c2_Pin)));
 80004b6:	bf00      	nop
 80004b8:	2110      	movs	r1, #16
 80004ba:	4822      	ldr	r0, [pc, #136]	; (8000544 <Keypad_Get_Char+0x3e8>)
 80004bc:	f001 fc54 	bl	8001d68 <HAL_GPIO_ReadPin>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d0f8      	beq.n	80004b8 <Keypad_Get_Char+0x35c>
		HAL_Delay(4);
 80004c6:	2004      	movs	r0, #4
 80004c8:	f001 f8e6 	bl	8001698 <HAL_Delay>
		val_key = keys[3][1];
 80004cc:	2230      	movs	r2, #48	; 0x30
 80004ce:	4b1c      	ldr	r3, [pc, #112]	; (8000540 <Keypad_Get_Char+0x3e4>)
 80004d0:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(c3_GPIO_Port, c3_Pin))){
 80004d2:	2108      	movs	r1, #8
 80004d4:	481b      	ldr	r0, [pc, #108]	; (8000544 <Keypad_Get_Char+0x3e8>)
 80004d6:	f001 fc47 	bl	8001d68 <HAL_GPIO_ReadPin>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d110      	bne.n	8000502 <Keypad_Get_Char+0x3a6>
		HAL_Delay(4);
 80004e0:	2004      	movs	r0, #4
 80004e2:	f001 f8d9 	bl	8001698 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(c3_GPIO_Port, c3_Pin)));
 80004e6:	bf00      	nop
 80004e8:	2108      	movs	r1, #8
 80004ea:	4816      	ldr	r0, [pc, #88]	; (8000544 <Keypad_Get_Char+0x3e8>)
 80004ec:	f001 fc3c 	bl	8001d68 <HAL_GPIO_ReadPin>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d0f8      	beq.n	80004e8 <Keypad_Get_Char+0x38c>
		HAL_Delay(4);
 80004f6:	2004      	movs	r0, #4
 80004f8:	f001 f8ce 	bl	8001698 <HAL_Delay>
		val_key = keys[3][2];
 80004fc:	2223      	movs	r2, #35	; 0x23
 80004fe:	4b10      	ldr	r3, [pc, #64]	; (8000540 <Keypad_Get_Char+0x3e4>)
 8000500:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(c4_GPIO_Port, c4_Pin))){
 8000502:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000506:	4810      	ldr	r0, [pc, #64]	; (8000548 <Keypad_Get_Char+0x3ec>)
 8000508:	f001 fc2e 	bl	8001d68 <HAL_GPIO_ReadPin>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d111      	bne.n	8000536 <Keypad_Get_Char+0x3da>
		HAL_Delay(4);
 8000512:	2004      	movs	r0, #4
 8000514:	f001 f8c0 	bl	8001698 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(c4_GPIO_Port, c4_Pin)));
 8000518:	bf00      	nop
 800051a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800051e:	480a      	ldr	r0, [pc, #40]	; (8000548 <Keypad_Get_Char+0x3ec>)
 8000520:	f001 fc22 	bl	8001d68 <HAL_GPIO_ReadPin>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d0f7      	beq.n	800051a <Keypad_Get_Char+0x3be>
		HAL_Delay(4);
 800052a:	2004      	movs	r0, #4
 800052c:	f001 f8b4 	bl	8001698 <HAL_Delay>
		val_key = keys[3][3];
 8000530:	2244      	movs	r2, #68	; 0x44
 8000532:	4b03      	ldr	r3, [pc, #12]	; (8000540 <Keypad_Get_Char+0x3e4>)
 8000534:	701a      	strb	r2, [r3, #0]
	}
	return val_key;
 8000536:	4b02      	ldr	r3, [pc, #8]	; (8000540 <Keypad_Get_Char+0x3e4>)
 8000538:	781b      	ldrb	r3, [r3, #0]
}
 800053a:	4618      	mov	r0, r3
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	2000002c 	.word	0x2000002c
 8000544:	40010c00 	.word	0x40010c00
 8000548:	40010800 	.word	0x40010800

0800054c <lcd_begin>:
static void lcd_sendCmd(LCD_t *lcd, char cmd);
static void delay_us(uint16_t time);

/* Exported functions --------------------------------------------------------*/
//init lcd display
void lcd_begin(LCD_t *lcd, uint8_t cols, uint8_t rows, uint8_t dotsize) {
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af02      	add	r7, sp, #8
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	4608      	mov	r0, r1
 8000556:	4611      	mov	r1, r2
 8000558:	461a      	mov	r2, r3
 800055a:	4603      	mov	r3, r0
 800055c:	70fb      	strb	r3, [r7, #3]
 800055e:	460b      	mov	r3, r1
 8000560:	70bb      	strb	r3, [r7, #2]
 8000562:	4613      	mov	r3, r2
 8000564:	707b      	strb	r3, [r7, #1]
	// 4 bit initialization
	lcd->displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	2200      	movs	r2, #0
 800056a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	if (rows > 1) lcd->displayfunction |= LCD_2LINE;
 800056e:	78bb      	ldrb	r3, [r7, #2]
 8000570:	2b01      	cmp	r3, #1
 8000572:	d908      	bls.n	8000586 <lcd_begin+0x3a>
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800057a:	f043 0308 	orr.w	r3, r3, #8
 800057e:	b2da      	uxtb	r2, r3
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	lcd->rows = rows;
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	78ba      	ldrb	r2, [r7, #2]
 800058a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	lcd->cols = cols;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	78fa      	ldrb	r2, [r7, #3]
 8000592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	lcd_setRowOffsets(lcd, 0x00, 0x40, 0x00 + cols, 0x40 + cols);
 8000596:	78fa      	ldrb	r2, [r7, #3]
 8000598:	78fb      	ldrb	r3, [r7, #3]
 800059a:	3340      	adds	r3, #64	; 0x40
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	4613      	mov	r3, r2
 80005a0:	2240      	movs	r2, #64	; 0x40
 80005a2:	2100      	movs	r1, #0
 80005a4:	6878      	ldr	r0, [r7, #4]
 80005a6:	f000 f918 	bl	80007da <lcd_setRowOffsets>

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != LCD_5x8DOTS) && (rows == 1)) {
 80005aa:	787b      	ldrb	r3, [r7, #1]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d00b      	beq.n	80005c8 <lcd_begin+0x7c>
 80005b0:	78bb      	ldrb	r3, [r7, #2]
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d108      	bne.n	80005c8 <lcd_begin+0x7c>
		lcd->displayfunction |= LCD_5x10DOTS;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80005bc:	f043 0304 	orr.w	r3, r3, #4
 80005c0:	b2da      	uxtb	r2, r3
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	}

	HAL_Delay(50);	// wait for >40ms
 80005c8:	2032      	movs	r0, #50	; 0x32
 80005ca:	f001 f865 	bl	8001698 <HAL_Delay>
	lcd_sendCmd(lcd, 0x03);
 80005ce:	2103      	movs	r1, #3
 80005d0:	6878      	ldr	r0, [r7, #4]
 80005d2:	f000 f99b 	bl	800090c <lcd_sendCmd>
	HAL_Delay(5);		// wait for >4.1ms
 80005d6:	2005      	movs	r0, #5
 80005d8:	f001 f85e 	bl	8001698 <HAL_Delay>
	lcd_sendCmd(lcd, 0x03);
 80005dc:	2103      	movs	r1, #3
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f000 f994 	bl	800090c <lcd_sendCmd>
	delay_us(150);	// wait for >100us
 80005e4:	2096      	movs	r0, #150	; 0x96
 80005e6:	f000 f9af 	bl	8000948 <delay_us>
	lcd_sendCmd(lcd, 0x03);
 80005ea:	2103      	movs	r1, #3
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f000 f98d 	bl	800090c <lcd_sendCmd>
	lcd_sendCmd(lcd, 0x02);	//set 4 bit mode
 80005f2:	2102      	movs	r1, #2
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f000 f989 	bl	800090c <lcd_sendCmd>
	HAL_Delay(1);
 80005fa:	2001      	movs	r0, #1
 80005fc:	f001 f84c 	bl	8001698 <HAL_Delay>

	// finally, set interface type, # lines and font size
	lcd_sendCmd(lcd, LCD_FUNCTIONSET | lcd->displayfunction);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8000606:	f043 0320 	orr.w	r3, r3, #32
 800060a:	b2db      	uxtb	r3, r3
 800060c:	4619      	mov	r1, r3
 800060e:	6878      	ldr	r0, [r7, #4]
 8000610:	f000 f97c 	bl	800090c <lcd_sendCmd>
	//set display control D=1,C=0, B=0, display on, cursor off and cursor blink off
	lcd->displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2204      	movs	r2, #4
 8000618:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	lcd_display(lcd);
 800061c:	6878      	ldr	r0, [r7, #4]
 800061e:	f000 f833 	bl	8000688 <lcd_display>
	lcd_clear(lcd);  // clear display
 8000622:	6878      	ldr	r0, [r7, #4]
 8000624:	f000 f815 	bl	8000652 <lcd_clear>
	HAL_Delay(2);
 8000628:	2002      	movs	r0, #2
 800062a:	f001 f835 	bl	8001698 <HAL_Delay>
	// set the entry mode --> I/D = 1 (increment cursor) & S = 0 (no shift)
	lcd->displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2202      	movs	r2, #2
 8000632:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	lcd_sendCmd(lcd, LCD_ENTRYMODESET | lcd->displaymode);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800063c:	f043 0304 	orr.w	r3, r3, #4
 8000640:	b2db      	uxtb	r3, r3
 8000642:	4619      	mov	r1, r3
 8000644:	6878      	ldr	r0, [r7, #4]
 8000646:	f000 f961 	bl	800090c <lcd_sendCmd>
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}

08000652 <lcd_clear>:
// ----------------------------------------------------------------

//clear lcd display
void lcd_clear(LCD_t *lcd) {
 8000652:	b580      	push	{r7, lr}
 8000654:	b082      	sub	sp, #8
 8000656:	af00      	add	r7, sp, #0
 8000658:	6078      	str	r0, [r7, #4]
	lcd_sendCmd(lcd, LCD_CLEARDISPLAY);
 800065a:	2101      	movs	r1, #1
 800065c:	6878      	ldr	r0, [r7, #4]
 800065e:	f000 f955 	bl	800090c <lcd_sendCmd>
}
 8000662:	bf00      	nop
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}

0800066a <lcd_home>:
// ----------------------------------------------------------------

// set cursor position to zero
void lcd_home(LCD_t *lcd) {
 800066a:	b580      	push	{r7, lr}
 800066c:	b082      	sub	sp, #8
 800066e:	af00      	add	r7, sp, #0
 8000670:	6078      	str	r0, [r7, #4]
	lcd_sendCmd(lcd, LCD_RETURNHOME);
 8000672:	2102      	movs	r1, #2
 8000674:	6878      	ldr	r0, [r7, #4]
 8000676:	f000 f949 	bl	800090c <lcd_sendCmd>
	HAL_Delay(2);	//delay >= 1.52ms
 800067a:	2002      	movs	r0, #2
 800067c:	f001 f80c 	bl	8001698 <HAL_Delay>
}
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <lcd_display>:
	lcd_sendCmd(lcd, LCD_DISPLAYCONTROL | lcd->displaycontrol);
}
// ----------------------------------------------------------------

// Turn the display on
void lcd_display(LCD_t *lcd) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	lcd->displaycontrol |= LCD_DISPLAYON;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8000696:	f043 0304 	orr.w	r3, r3, #4
 800069a:	b2da      	uxtb	r2, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	lcd_sendCmd(lcd, LCD_DISPLAYCONTROL | lcd->displaycontrol);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80006a8:	f043 0308 	orr.w	r3, r3, #8
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	4619      	mov	r1, r3
 80006b0:	6878      	ldr	r0, [r7, #4]
 80006b2:	f000 f92b 	bl	800090c <lcd_sendCmd>
}
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}

080006be <lcd_blink>:
	lcd_sendCmd(lcd, LCD_DISPLAYCONTROL | lcd->displaycontrol);
}
// ----------------------------------------------------------------

// Turn on the blinking cursor
void lcd_blink(LCD_t *lcd) {
 80006be:	b580      	push	{r7, lr}
 80006c0:	b082      	sub	sp, #8
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	6078      	str	r0, [r7, #4]
	lcd->displaycontrol |= LCD_BLINKON;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80006cc:	f043 0301 	orr.w	r3, r3, #1
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	lcd_sendCmd(lcd, LCD_DISPLAYCONTROL | lcd->displaycontrol);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80006de:	f043 0308 	orr.w	r3, r3, #8
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	4619      	mov	r1, r3
 80006e6:	6878      	ldr	r0, [r7, #4]
 80006e8:	f000 f910 	bl	800090c <lcd_sendCmd>
}
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <lcd_cursor>:
	lcd_sendCmd(lcd, LCD_DISPLAYCONTROL | lcd->displaycontrol);
}
// ----------------------------------------------------------------

// Turns the underline cursor on
void lcd_cursor(LCD_t *lcd) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
	lcd->displaycontrol |= LCD_CURSORON;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8000702:	f043 0302 	orr.w	r3, r3, #2
 8000706:	b2da      	uxtb	r2, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	lcd_sendCmd(lcd, LCD_DISPLAYCONTROL | lcd->displaycontrol);
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8000714:	f043 0308 	orr.w	r3, r3, #8
 8000718:	b2db      	uxtb	r3, r3
 800071a:	4619      	mov	r1, r3
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f000 f8f5 	bl	800090c <lcd_sendCmd>
}
 8000722:	bf00      	nop
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}

0800072a <lcd_setCursor>:
	lcd_sendCmd(lcd, LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVERIGHT);
}
// ----------------------------------------------------------------

//set cursor position
void lcd_setCursor(LCD_t *lcd, uint8_t col, uint8_t row) {
 800072a:	b580      	push	{r7, lr}
 800072c:	b084      	sub	sp, #16
 800072e:	af00      	add	r7, sp, #0
 8000730:	6078      	str	r0, [r7, #4]
 8000732:	460b      	mov	r3, r1
 8000734:	70fb      	strb	r3, [r7, #3]
 8000736:	4613      	mov	r3, r2
 8000738:	70bb      	strb	r3, [r7, #2]
	const size_t max_rows = sizeof(lcd->row_offsets) / sizeof(*lcd->row_offsets);
 800073a:	2304      	movs	r3, #4
 800073c:	60fb      	str	r3, [r7, #12]
	if (row >= max_rows) {
 800073e:	78bb      	ldrb	r3, [r7, #2]
 8000740:	68fa      	ldr	r2, [r7, #12]
 8000742:	429a      	cmp	r2, r3
 8000744:	d803      	bhi.n	800074e <lcd_setCursor+0x24>
		row = max_rows - 1;    // we count rows starting w/0
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	b2db      	uxtb	r3, r3
 800074a:	3b01      	subs	r3, #1
 800074c:	70bb      	strb	r3, [r7, #2]
	}
	if (row >= lcd->rows) {
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000754:	78ba      	ldrb	r2, [r7, #2]
 8000756:	429a      	cmp	r2, r3
 8000758:	d304      	bcc.n	8000764 <lcd_setCursor+0x3a>
		row = lcd->rows - 1;    // we count rows starting w/0
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000760:	3b01      	subs	r3, #1
 8000762:	70bb      	strb	r3, [r7, #2]
	}

	lcd_sendCmd(lcd, LCD_SETDDRAMADDR | (col + lcd->row_offsets[row]));
 8000764:	78bb      	ldrb	r3, [r7, #2]
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	4413      	add	r3, r2
 800076a:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800076e:	78fb      	ldrb	r3, [r7, #3]
 8000770:	4413      	add	r3, r2
 8000772:	b2db      	uxtb	r3, r3
 8000774:	b25b      	sxtb	r3, r3
 8000776:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800077a:	b25b      	sxtb	r3, r3
 800077c:	b2db      	uxtb	r3, r3
 800077e:	4619      	mov	r1, r3
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	f000 f8c3 	bl	800090c <lcd_sendCmd>
}
 8000786:	bf00      	nop
 8000788:	3710      	adds	r7, #16
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}

0800078e <lcd_print>:
// ----------------------------------------------------------------

//send strings to lcd
void lcd_print(LCD_t *lcd, char *str) {
 800078e:	b580      	push	{r7, lr}
 8000790:	b082      	sub	sp, #8
 8000792:	af00      	add	r7, sp, #0
 8000794:	6078      	str	r0, [r7, #4]
 8000796:	6039      	str	r1, [r7, #0]
	while (*str)
 8000798:	e007      	b.n	80007aa <lcd_print+0x1c>
		lcd_sendData(lcd, *str++);
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	1c5a      	adds	r2, r3, #1
 800079e:	603a      	str	r2, [r7, #0]
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	4619      	mov	r1, r3
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f000 f894 	bl	80008d2 <lcd_sendData>
	while (*str)
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d1f3      	bne.n	800079a <lcd_print+0xc>
}
 80007b2:	bf00      	nop
 80007b4:	bf00      	nop
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}

080007bc <lcd_write>:
// ----------------------------------------------------------------

//send raw data to lcd
void lcd_write(LCD_t *lcd, uint8_t data) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	460b      	mov	r3, r1
 80007c6:	70fb      	strb	r3, [r7, #3]
	lcd_sendData(lcd, data);
 80007c8:	78fb      	ldrb	r3, [r7, #3]
 80007ca:	4619      	mov	r1, r3
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f000 f880 	bl	80008d2 <lcd_sendData>
}
 80007d2:	bf00      	nop
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}

080007da <lcd_setRowOffsets>:
// ----------------------------------------------------------------

/* Privated functions --------------------------------------------------------*/
//set row offset for diferent display
static void lcd_setRowOffsets(LCD_t *lcd, int row0, int row1, int row2,
    int row3) {
 80007da:	b480      	push	{r7}
 80007dc:	b085      	sub	sp, #20
 80007de:	af00      	add	r7, sp, #0
 80007e0:	60f8      	str	r0, [r7, #12]
 80007e2:	60b9      	str	r1, [r7, #8]
 80007e4:	607a      	str	r2, [r7, #4]
 80007e6:	603b      	str	r3, [r7, #0]
	lcd->row_offsets[0] = row0;
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	b2da      	uxtb	r2, r3
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	lcd->row_offsets[1] = row1;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	b2da      	uxtb	r2, r3
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	lcd->row_offsets[2] = row2;
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	b2da      	uxtb	r2, r3
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	lcd->row_offsets[3] = row3;
 8000806:	69bb      	ldr	r3, [r7, #24]
 8000808:	b2da      	uxtb	r2, r3
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8000810:	bf00      	nop
 8000812:	3714      	adds	r7, #20
 8000814:	46bd      	mov	sp, r7
 8000816:	bc80      	pop	{r7}
 8000818:	4770      	bx	lr

0800081a <lcd_send>:
// ----------------------------------------------------------------

//send info to lcd in 4 byte mode
static void lcd_send(LCD_t *lcd, char data, uint8_t rs) {
 800081a:	b580      	push	{r7, lr}
 800081c:	b082      	sub	sp, #8
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
 8000822:	460b      	mov	r3, r1
 8000824:	70fb      	strb	r3, [r7, #3]
 8000826:	4613      	mov	r3, r2
 8000828:	70bb      	strb	r3, [r7, #2]
	// rs = 1 for data, rs=0 for command
	HAL_GPIO_WritePin(lcd->RS_port, lcd->RS_pin, rs);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	6818      	ldr	r0, [r3, #0]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	889b      	ldrh	r3, [r3, #4]
 8000832:	78ba      	ldrb	r2, [r7, #2]
 8000834:	4619      	mov	r1, r3
 8000836:	f001 faae 	bl	8001d96 <HAL_GPIO_WritePin>

	// write the data to the respective pin
	HAL_GPIO_WritePin(lcd->D7_port, lcd->D7_pin, ((data >> 3) & 0x01));
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 8000842:	78fb      	ldrb	r3, [r7, #3]
 8000844:	08db      	lsrs	r3, r3, #3
 8000846:	b2db      	uxtb	r3, r3
 8000848:	f003 0301 	and.w	r3, r3, #1
 800084c:	b2db      	uxtb	r3, r3
 800084e:	461a      	mov	r2, r3
 8000850:	f001 faa1 	bl	8001d96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D6_port, lcd->D6_pin, ((data >> 2) & 0x01));
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 800085c:	78fb      	ldrb	r3, [r7, #3]
 800085e:	089b      	lsrs	r3, r3, #2
 8000860:	b2db      	uxtb	r3, r3
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	b2db      	uxtb	r3, r3
 8000868:	461a      	mov	r2, r3
 800086a:	f001 fa94 	bl	8001d96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D5_port, lcd->D5_pin, ((data >> 1) & 0x01));
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	6a18      	ldr	r0, [r3, #32]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 8000876:	78fb      	ldrb	r3, [r7, #3]
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	b2db      	uxtb	r3, r3
 800087c:	f003 0301 	and.w	r3, r3, #1
 8000880:	b2db      	uxtb	r3, r3
 8000882:	461a      	mov	r2, r3
 8000884:	f001 fa87 	bl	8001d96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D4_port, lcd->D4_pin, ((data >> 0) & 0x01));
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	6998      	ldr	r0, [r3, #24]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	8b99      	ldrh	r1, [r3, #28]
 8000890:	78fb      	ldrb	r3, [r7, #3]
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	b2db      	uxtb	r3, r3
 8000898:	461a      	mov	r2, r3
 800089a:	f001 fa7c 	bl	8001d96 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(lcd->EN_port, lcd->EN_pin, GPIO_PIN_SET);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	6918      	ldr	r0, [r3, #16]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	8a9b      	ldrh	r3, [r3, #20]
 80008a6:	2201      	movs	r2, #1
 80008a8:	4619      	mov	r1, r3
 80008aa:	f001 fa74 	bl	8001d96 <HAL_GPIO_WritePin>
	delay_us(1);	// enable pulse must be > 450ns
 80008ae:	2001      	movs	r0, #1
 80008b0:	f000 f84a 	bl	8000948 <delay_us>
	HAL_GPIO_WritePin(lcd->EN_port, lcd->EN_pin, GPIO_PIN_RESET);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	6918      	ldr	r0, [r3, #16]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	8a9b      	ldrh	r3, [r3, #20]
 80008bc:	2200      	movs	r2, #0
 80008be:	4619      	mov	r1, r3
 80008c0:	f001 fa69 	bl	8001d96 <HAL_GPIO_WritePin>
	delay_us(50);	// commands need > 37us to settle
 80008c4:	2032      	movs	r0, #50	; 0x32
 80008c6:	f000 f83f 	bl	8000948 <delay_us>
}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <lcd_sendData>:
// ----------------------------------------------------------------

//send data to lcd
static void lcd_sendData(LCD_t *lcd, char data) {
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b084      	sub	sp, #16
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	6078      	str	r0, [r7, #4]
 80008da:	460b      	mov	r3, r1
 80008dc:	70fb      	strb	r3, [r7, #3]
	char _data;

	// send higher nibble
	_data = ((data >> 4) & 0x0f);
 80008de:	78fb      	ldrb	r3, [r7, #3]
 80008e0:	091b      	lsrs	r3, r3, #4
 80008e2:	73fb      	strb	r3, [r7, #15]
	lcd_send(lcd, _data, 1);  // rs =1 for sending data
 80008e4:	7bfb      	ldrb	r3, [r7, #15]
 80008e6:	2201      	movs	r2, #1
 80008e8:	4619      	mov	r1, r3
 80008ea:	6878      	ldr	r0, [r7, #4]
 80008ec:	f7ff ff95 	bl	800081a <lcd_send>

	// send Lower nibble
	_data = ((data) & 0x0f);
 80008f0:	78fb      	ldrb	r3, [r7, #3]
 80008f2:	f003 030f 	and.w	r3, r3, #15
 80008f6:	73fb      	strb	r3, [r7, #15]
	lcd_send(lcd, _data, 1);
 80008f8:	7bfb      	ldrb	r3, [r7, #15]
 80008fa:	2201      	movs	r2, #1
 80008fc:	4619      	mov	r1, r3
 80008fe:	6878      	ldr	r0, [r7, #4]
 8000900:	f7ff ff8b 	bl	800081a <lcd_send>
}
 8000904:	bf00      	nop
 8000906:	3710      	adds	r7, #16
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}

0800090c <lcd_sendCmd>:
// ----------------------------------------------------------------

//send command to lcd
static void lcd_sendCmd(LCD_t *lcd, char cmd) {
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
 8000914:	460b      	mov	r3, r1
 8000916:	70fb      	strb	r3, [r7, #3]
	char _cmd;

	// send higher nibble
	_cmd = ((cmd >> 4) & 0x0f);
 8000918:	78fb      	ldrb	r3, [r7, #3]
 800091a:	091b      	lsrs	r3, r3, #4
 800091c:	73fb      	strb	r3, [r7, #15]
	lcd_send(lcd, _cmd, 0);  // rs = 0 for sending command
 800091e:	7bfb      	ldrb	r3, [r7, #15]
 8000920:	2200      	movs	r2, #0
 8000922:	4619      	mov	r1, r3
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f7ff ff78 	bl	800081a <lcd_send>

	// send Lower nibble
	_cmd = ((cmd) & 0x0f);
 800092a:	78fb      	ldrb	r3, [r7, #3]
 800092c:	f003 030f 	and.w	r3, r3, #15
 8000930:	73fb      	strb	r3, [r7, #15]
	lcd_send(lcd, _cmd, 0);
 8000932:	7bfb      	ldrb	r3, [r7, #15]
 8000934:	2200      	movs	r2, #0
 8000936:	4619      	mov	r1, r3
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	f7ff ff6e 	bl	800081a <lcd_send>
}
 800093e:	bf00      	nop
 8000940:	3710      	adds	r7, #16
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
	...

08000948 <delay_us>:
// ----------------------------------------------------------------

//set delay in microseconds
static void delay_us(uint16_t time) {
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	80fb      	strh	r3, [r7, #6]
	uint16_t delay = time * (HAL_RCC_GetHCLKFreq() / 1000000);
 8000952:	f001 fe11 	bl	8002578 <HAL_RCC_GetHCLKFreq>
 8000956:	4603      	mov	r3, r0
 8000958:	4a0c      	ldr	r2, [pc, #48]	; (800098c <delay_us+0x44>)
 800095a:	fba2 2303 	umull	r2, r3, r2, r3
 800095e:	0c9b      	lsrs	r3, r3, #18
 8000960:	b29b      	uxth	r3, r3
 8000962:	88fa      	ldrh	r2, [r7, #6]
 8000964:	fb02 f303 	mul.w	r3, r2, r3
 8000968:	817b      	strh	r3, [r7, #10]
	for (int i = 0; i < delay; i += 14) {
 800096a:	2300      	movs	r3, #0
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	e003      	b.n	8000978 <delay_us+0x30>
		__ASM("NOP");
 8000970:	bf00      	nop
	for (int i = 0; i < delay; i += 14) {
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	330e      	adds	r3, #14
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	897b      	ldrh	r3, [r7, #10]
 800097a:	68fa      	ldr	r2, [r7, #12]
 800097c:	429a      	cmp	r2, r3
 800097e:	dbf7      	blt.n	8000970 <delay_us+0x28>
	}
}
 8000980:	bf00      	nop
 8000982:	bf00      	nop
 8000984:	3710      	adds	r7, #16
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	431bde83 	.word	0x431bde83

08000990 <lcd_clearRow1>:
// ----------------------------------------------------------------

void lcd_clearRow1(LCD_t *lcd) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
    lcd_setCursor(lcd, 0, 1);
 8000998:	2201      	movs	r2, #1
 800099a:	2100      	movs	r1, #0
 800099c:	6878      	ldr	r0, [r7, #4]
 800099e:	f7ff fec4 	bl	800072a <lcd_setCursor>
    for (uint8_t i = 0; i < lcd->cols; i++) {
 80009a2:	2300      	movs	r3, #0
 80009a4:	73fb      	strb	r3, [r7, #15]
 80009a6:	e006      	b.n	80009b6 <lcd_clearRow1+0x26>
        lcd_write(lcd, ' ');  // Escribe espacios en blanco para borrar la fila 1
 80009a8:	2120      	movs	r1, #32
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f7ff ff06 	bl	80007bc <lcd_write>
    for (uint8_t i = 0; i < lcd->cols; i++) {
 80009b0:	7bfb      	ldrb	r3, [r7, #15]
 80009b2:	3301      	adds	r3, #1
 80009b4:	73fb      	strb	r3, [r7, #15]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80009bc:	7bfa      	ldrb	r2, [r7, #15]
 80009be:	429a      	cmp	r2, r3
 80009c0:	d3f2      	bcc.n	80009a8 <lcd_clearRow1+0x18>
    }
    lcd_setCursor(lcd, 0, 1);  // Restablece el cursor al inicio de la fila 1
 80009c2:	2201      	movs	r2, #1
 80009c4:	2100      	movs	r1, #0
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	f7ff feaf 	bl	800072a <lcd_setCursor>
}
 80009cc:	bf00      	nop
 80009ce:	3710      	adds	r7, #16
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08c      	sub	sp, #48	; 0x30
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009da:	f000 fdfb 	bl	80015d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009de:	f000 fb1d 	bl	800101c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e2:	f000 fc1b 	bl	800121c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009e6:	f000 fbef 	bl	80011c8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80009ea:	f000 fb53 	bl	8001094 <MX_TIM2_Init>
  MX_TIM3_Init();
 80009ee:	f000 fb9d 	bl	800112c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  Lcd.RS_port = LCD_RS_GPIO_Port;
 80009f2:	4b95      	ldr	r3, [pc, #596]	; (8000c48 <main+0x274>)
 80009f4:	4a95      	ldr	r2, [pc, #596]	; (8000c4c <main+0x278>)
 80009f6:	601a      	str	r2, [r3, #0]
  Lcd.RS_pin = LCD_RS_Pin;
 80009f8:	4b93      	ldr	r3, [pc, #588]	; (8000c48 <main+0x274>)
 80009fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009fe:	809a      	strh	r2, [r3, #4]
  Lcd.EN_port = LCD_EN_GPIO_Port;
 8000a00:	4b91      	ldr	r3, [pc, #580]	; (8000c48 <main+0x274>)
 8000a02:	4a92      	ldr	r2, [pc, #584]	; (8000c4c <main+0x278>)
 8000a04:	611a      	str	r2, [r3, #16]
  Lcd.EN_pin = LCD_EN_Pin;
 8000a06:	4b90      	ldr	r3, [pc, #576]	; (8000c48 <main+0x274>)
 8000a08:	2202      	movs	r2, #2
 8000a0a:	829a      	strh	r2, [r3, #20]
  Lcd.D4_port = D4_GPIO_Port;
 8000a0c:	4b8e      	ldr	r3, [pc, #568]	; (8000c48 <main+0x274>)
 8000a0e:	4a8f      	ldr	r2, [pc, #572]	; (8000c4c <main+0x278>)
 8000a10:	619a      	str	r2, [r3, #24]
  Lcd.D4_pin = D4_Pin;
 8000a12:	4b8d      	ldr	r3, [pc, #564]	; (8000c48 <main+0x274>)
 8000a14:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a18:	839a      	strh	r2, [r3, #28]
  Lcd.D5_port = D5_GPIO_Port;
 8000a1a:	4b8b      	ldr	r3, [pc, #556]	; (8000c48 <main+0x274>)
 8000a1c:	4a8b      	ldr	r2, [pc, #556]	; (8000c4c <main+0x278>)
 8000a1e:	621a      	str	r2, [r3, #32]
  Lcd.D5_pin = D5_Pin;
 8000a20:	4b89      	ldr	r3, [pc, #548]	; (8000c48 <main+0x274>)
 8000a22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a26:	849a      	strh	r2, [r3, #36]	; 0x24
  Lcd.D6_port = D6_GPIO_Port;
 8000a28:	4b87      	ldr	r3, [pc, #540]	; (8000c48 <main+0x274>)
 8000a2a:	4a88      	ldr	r2, [pc, #544]	; (8000c4c <main+0x278>)
 8000a2c:	629a      	str	r2, [r3, #40]	; 0x28
  Lcd.D6_pin = D6_Pin;
 8000a2e:	4b86      	ldr	r3, [pc, #536]	; (8000c48 <main+0x274>)
 8000a30:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a34:	859a      	strh	r2, [r3, #44]	; 0x2c
  Lcd.D7_port = D7_GPIO_Port;
 8000a36:	4b84      	ldr	r3, [pc, #528]	; (8000c48 <main+0x274>)
 8000a38:	4a84      	ldr	r2, [pc, #528]	; (8000c4c <main+0x278>)
 8000a3a:	631a      	str	r2, [r3, #48]	; 0x30
  Lcd.D7_pin = D7_Pin;
 8000a3c:	4b82      	ldr	r3, [pc, #520]	; (8000c48 <main+0x274>)
 8000a3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a42:	869a      	strh	r2, [r3, #52]	; 0x34

  lcd_begin(&Lcd, 16, 2, LCD_5x8DOTS);
 8000a44:	2300      	movs	r3, #0
 8000a46:	2202      	movs	r2, #2
 8000a48:	2110      	movs	r1, #16
 8000a4a:	487f      	ldr	r0, [pc, #508]	; (8000c48 <main+0x274>)
 8000a4c:	f7ff fd7e 	bl	800054c <lcd_begin>

  	memset(incomingCallRX, 0, sizeof(incomingCallRX));
 8000a50:	2214      	movs	r2, #20
 8000a52:	2100      	movs	r1, #0
 8000a54:	487e      	ldr	r0, [pc, #504]	; (8000c50 <main+0x27c>)
 8000a56:	f003 f91d 	bl	8003c94 <memset>


  	// Calling Line Identification Presentation
	char at_command[] = "AT+CLIP=1\r\n";
 8000a5a:	4a7e      	ldr	r2, [pc, #504]	; (8000c54 <main+0x280>)
 8000a5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a60:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a62:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_UART_Transmit(&huart2, (uint8_t*)at_command, strlen(at_command), HAL_MAX_DELAY);
 8000a66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff fb6e 	bl	800014c <strlen>
 8000a70:	4603      	mov	r3, r0
 8000a72:	b29a      	uxth	r2, r3
 8000a74:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000a78:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7c:	4876      	ldr	r0, [pc, #472]	; (8000c58 <main+0x284>)
 8000a7e:	f002 fa47 	bl	8002f10 <HAL_UART_Transmit>

	// I check the connection
  	connectionSIM808();
 8000a82:	f000 f9fd 	bl	8000e80 <connectionSIM808>

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
    {
    	 keyboard = Keypad_Get_Char();
 8000a86:	f7ff fb69 	bl	800015c <Keypad_Get_Char>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	4b73      	ldr	r3, [pc, #460]	; (8000c5c <main+0x288>)
 8000a90:	701a      	strb	r2, [r3, #0]
    	    if(hasConnection == 1){
 8000a92:	4b73      	ldr	r3, [pc, #460]	; (8000c60 <main+0x28c>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	f040 81ba 	bne.w	8000e10 <main+0x43c>
    	    	if(flag == 1){
 8000a9c:	4b71      	ldr	r3, [pc, #452]	; (8000c64 <main+0x290>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d104      	bne.n	8000aae <main+0xda>
    	    		initialScreen();
 8000aa4:	f000 f9ce 	bl	8000e44 <initialScreen>
    	    		flag = 0;
 8000aa8:	4b6e      	ldr	r3, [pc, #440]	; (8000c64 <main+0x290>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	701a      	strb	r2, [r3, #0]
    	    	}

    	    	if(HAL_UART_Receive_IT(&huart2, incomingCallRX, sizeof(incomingCallRX)) == HAL_OK){
 8000aae:	2214      	movs	r2, #20
 8000ab0:	4967      	ldr	r1, [pc, #412]	; (8000c50 <main+0x27c>)
 8000ab2:	4869      	ldr	r0, [pc, #420]	; (8000c58 <main+0x284>)
 8000ab4:	f002 fb41 	bl	800313a <HAL_UART_Receive_IT>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	f040 80ec 	bne.w	8000c98 <main+0x2c4>
    	    		if(strstr((char*)incomingCallRX, "+CLIP:")){
 8000ac0:	4969      	ldr	r1, [pc, #420]	; (8000c68 <main+0x294>)
 8000ac2:	4863      	ldr	r0, [pc, #396]	; (8000c50 <main+0x27c>)
 8000ac4:	f003 f8fd 	bl	8003cc2 <strstr>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	f000 80e4 	beq.w	8000c98 <main+0x2c4>
    	    			HAL_TIM_Base_Start_IT(&htim2);
 8000ad0:	4866      	ldr	r0, [pc, #408]	; (8000c6c <main+0x298>)
 8000ad2:	f001 fdf1 	bl	80026b8 <HAL_TIM_Base_Start_IT>
    	    			HAL_TIM_Base_Start_IT(&htim3);
 8000ad6:	4866      	ldr	r0, [pc, #408]	; (8000c70 <main+0x29c>)
 8000ad8:	f001 fdee 	bl	80026b8 <HAL_TIM_Base_Start_IT>
    	    			lcd_clear(&Lcd);
 8000adc:	485a      	ldr	r0, [pc, #360]	; (8000c48 <main+0x274>)
 8000ade:	f7ff fdb8 	bl	8000652 <lcd_clear>
    	    			lcd_home(&Lcd);
 8000ae2:	4859      	ldr	r0, [pc, #356]	; (8000c48 <main+0x274>)
 8000ae4:	f7ff fdc1 	bl	800066a <lcd_home>
    	    			lcd_print(&Lcd, "Llamada!!!");
 8000ae8:	4962      	ldr	r1, [pc, #392]	; (8000c74 <main+0x2a0>)
 8000aea:	4857      	ldr	r0, [pc, #348]	; (8000c48 <main+0x274>)
 8000aec:	f7ff fe4f 	bl	800078e <lcd_print>
    	    			lcd_setCursor(&Lcd, 0, 1);
 8000af0:	2201      	movs	r2, #1
 8000af2:	2100      	movs	r1, #0
 8000af4:	4854      	ldr	r0, [pc, #336]	; (8000c48 <main+0x274>)
 8000af6:	f7ff fe18 	bl	800072a <lcd_setCursor>
    	    			while(1){
    	    				keyboard = Keypad_Get_Char();
 8000afa:	f7ff fb2f 	bl	800015c <Keypad_Get_Char>
 8000afe:	4603      	mov	r3, r0
 8000b00:	461a      	mov	r2, r3
 8000b02:	4b56      	ldr	r3, [pc, #344]	; (8000c5c <main+0x288>)
 8000b04:	701a      	strb	r2, [r3, #0]

    	    				if(cont == 15){
 8000b06:	4b5c      	ldr	r3, [pc, #368]	; (8000c78 <main+0x2a4>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	2b0f      	cmp	r3, #15
 8000b0c:	d111      	bne.n	8000b32 <main+0x15e>
    	    					HAL_TIM_Base_Stop_IT(&htim2);
 8000b0e:	4857      	ldr	r0, [pc, #348]	; (8000c6c <main+0x298>)
 8000b10:	f001 fe24 	bl	800275c <HAL_TIM_Base_Stop_IT>
    	    					HAL_TIM_Base_Stop_IT(&htim3);
 8000b14:	4856      	ldr	r0, [pc, #344]	; (8000c70 <main+0x29c>)
 8000b16:	f001 fe21 	bl	800275c <HAL_TIM_Base_Stop_IT>
    	    					HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b20:	4856      	ldr	r0, [pc, #344]	; (8000c7c <main+0x2a8>)
 8000b22:	f001 f938 	bl	8001d96 <HAL_GPIO_WritePin>
    	    					cont= 0;
 8000b26:	4b54      	ldr	r3, [pc, #336]	; (8000c78 <main+0x2a4>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	701a      	strb	r2, [r3, #0]
    	    					endCall();
 8000b2c:	f000 fa3a 	bl	8000fa4 <endCall>
    	    					break;
 8000b30:	e0b2      	b.n	8000c98 <main+0x2c4>
    	    				}

    	    				if(keyboard == 'A'){
 8000b32:	4b4a      	ldr	r3, [pc, #296]	; (8000c5c <main+0x288>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	2b41      	cmp	r3, #65	; 0x41
 8000b38:	d122      	bne.n	8000b80 <main+0x1ac>
    	    					char at[6] = "ATH0\r\n";
 8000b3a:	4a51      	ldr	r2, [pc, #324]	; (8000c80 <main+0x2ac>)
 8000b3c:	f107 031c 	add.w	r3, r7, #28
 8000b40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b44:	6018      	str	r0, [r3, #0]
 8000b46:	3304      	adds	r3, #4
 8000b48:	8019      	strh	r1, [r3, #0]
    	    					HAL_UART_Transmit(&huart2, (uint8_t*)at, strlen(at), HAL_MAX_DELAY);
 8000b4a:	f107 031c 	add.w	r3, r7, #28
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff fafc 	bl	800014c <strlen>
 8000b54:	4603      	mov	r3, r0
 8000b56:	b29a      	uxth	r2, r3
 8000b58:	f107 011c 	add.w	r1, r7, #28
 8000b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b60:	483d      	ldr	r0, [pc, #244]	; (8000c58 <main+0x284>)
 8000b62:	f002 f9d5 	bl	8002f10 <HAL_UART_Transmit>
    	    					HAL_TIM_Base_Stop_IT(&htim2);
 8000b66:	4841      	ldr	r0, [pc, #260]	; (8000c6c <main+0x298>)
 8000b68:	f001 fdf8 	bl	800275c <HAL_TIM_Base_Stop_IT>
    	    					HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, 0);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b72:	4842      	ldr	r0, [pc, #264]	; (8000c7c <main+0x2a8>)
 8000b74:	f001 f90f 	bl	8001d96 <HAL_GPIO_WritePin>
    	    					flag = 1;
 8000b78:	4b3a      	ldr	r3, [pc, #232]	; (8000c64 <main+0x290>)
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	701a      	strb	r2, [r3, #0]
    	    					break;
 8000b7e:	e08b      	b.n	8000c98 <main+0x2c4>
    	    				}
    	    				if(keyboard == 'D'){
 8000b80:	4b36      	ldr	r3, [pc, #216]	; (8000c5c <main+0x288>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b44      	cmp	r3, #68	; 0x44
 8000b86:	d1b8      	bne.n	8000afa <main+0x126>

    	    					HAL_TIM_Base_Stop_IT(&htim2);
 8000b88:	4838      	ldr	r0, [pc, #224]	; (8000c6c <main+0x298>)
 8000b8a:	f001 fde7 	bl	800275c <HAL_TIM_Base_Stop_IT>
    	    					HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, 0);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b94:	4839      	ldr	r0, [pc, #228]	; (8000c7c <main+0x2a8>)
 8000b96:	f001 f8fe 	bl	8001d96 <HAL_GPIO_WritePin>
    	    					lcd_clear(&Lcd);
 8000b9a:	482b      	ldr	r0, [pc, #172]	; (8000c48 <main+0x274>)
 8000b9c:	f7ff fd59 	bl	8000652 <lcd_clear>
    	    					lcd_home(&Lcd);
 8000ba0:	4829      	ldr	r0, [pc, #164]	; (8000c48 <main+0x274>)
 8000ba2:	f7ff fd62 	bl	800066a <lcd_home>

    	    					if(isFinishedCall() == 0){
 8000ba6:	f000 f9c3 	bl	8000f30 <isFinishedCall>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d10d      	bne.n	8000bcc <main+0x1f8>
    	    						lcd_print(&Lcd, "LLamada en");
 8000bb0:	4934      	ldr	r1, [pc, #208]	; (8000c84 <main+0x2b0>)
 8000bb2:	4825      	ldr	r0, [pc, #148]	; (8000c48 <main+0x274>)
 8000bb4:	f7ff fdeb 	bl	800078e <lcd_print>
    	    						lcd_setCursor(&Lcd, 0, 1);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4822      	ldr	r0, [pc, #136]	; (8000c48 <main+0x274>)
 8000bbe:	f7ff fdb4 	bl	800072a <lcd_setCursor>
    	    						lcd_print(&Lcd, "curso");
 8000bc2:	4931      	ldr	r1, [pc, #196]	; (8000c88 <main+0x2b4>)
 8000bc4:	4820      	ldr	r0, [pc, #128]	; (8000c48 <main+0x274>)
 8000bc6:	f7ff fde2 	bl	800078e <lcd_print>
 8000bca:	e013      	b.n	8000bf4 <main+0x220>

    	    					} else{
    	    						lcd_print(&Lcd, "LLamada");
 8000bcc:	492f      	ldr	r1, [pc, #188]	; (8000c8c <main+0x2b8>)
 8000bce:	481e      	ldr	r0, [pc, #120]	; (8000c48 <main+0x274>)
 8000bd0:	f7ff fddd 	bl	800078e <lcd_print>
    	    						lcd_setCursor(&Lcd, 0, 1);
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	481b      	ldr	r0, [pc, #108]	; (8000c48 <main+0x274>)
 8000bda:	f7ff fda6 	bl	800072a <lcd_setCursor>
    	    						lcd_print(&Lcd, "finalizada");
 8000bde:	492c      	ldr	r1, [pc, #176]	; (8000c90 <main+0x2bc>)
 8000be0:	4819      	ldr	r0, [pc, #100]	; (8000c48 <main+0x274>)
 8000be2:	f7ff fdd4 	bl	800078e <lcd_print>
    	    						HAL_Delay(2000);
 8000be6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000bea:	f000 fd55 	bl	8001698 <HAL_Delay>
    	    						flag = 1;
 8000bee:	4b1d      	ldr	r3, [pc, #116]	; (8000c64 <main+0x290>)
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	701a      	strb	r2, [r3, #0]
    	    					}
    	    					while(1){
    	    						if(flag == 1){
 8000bf4:	4b1b      	ldr	r3, [pc, #108]	; (8000c64 <main+0x290>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d023      	beq.n	8000c44 <main+0x270>
    	    							break;
    	    						}
    	    						keyboard = Keypad_Get_Char();
 8000bfc:	f7ff faae 	bl	800015c <Keypad_Get_Char>
 8000c00:	4603      	mov	r3, r0
 8000c02:	461a      	mov	r2, r3
 8000c04:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <main+0x288>)
 8000c06:	701a      	strb	r2, [r3, #0]
    	    						if(keyboard == 'A'){
 8000c08:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <main+0x288>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b41      	cmp	r3, #65	; 0x41
 8000c0e:	d1f1      	bne.n	8000bf4 <main+0x220>
    	    							char at[5] = "ATH\r\n";
 8000c10:	4a20      	ldr	r2, [pc, #128]	; (8000c94 <main+0x2c0>)
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c1a:	6018      	str	r0, [r3, #0]
 8000c1c:	3304      	adds	r3, #4
 8000c1e:	7019      	strb	r1, [r3, #0]
    	    							HAL_UART_Transmit(&huart2, (uint8_t*)at, strlen(at), HAL_MAX_DELAY);
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff fa91 	bl	800014c <strlen>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	b29a      	uxth	r2, r3
 8000c2e:	f107 0114 	add.w	r1, r7, #20
 8000c32:	f04f 33ff 	mov.w	r3, #4294967295
 8000c36:	4808      	ldr	r0, [pc, #32]	; (8000c58 <main+0x284>)
 8000c38:	f002 f96a 	bl	8002f10 <HAL_UART_Transmit>
    	    							flag = 1;
 8000c3c:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <main+0x290>)
 8000c3e:	2201      	movs	r2, #1
 8000c40:	701a      	strb	r2, [r3, #0]
    	    							break;
 8000c42:	e000      	b.n	8000c46 <main+0x272>
    	    							break;
 8000c44:	bf00      	nop
    	    				keyboard = Keypad_Get_Char();
 8000c46:	e758      	b.n	8000afa <main+0x126>
 8000c48:	20000108 	.word	0x20000108
 8000c4c:	40010c00 	.word	0x40010c00
 8000c50:	20000158 	.word	0x20000158
 8000c54:	08003d98 	.word	0x08003d98
 8000c58:	200000c0 	.word	0x200000c0
 8000c5c:	20000148 	.word	0x20000148
 8000c60:	20000000 	.word	0x20000000
 8000c64:	20000001 	.word	0x20000001
 8000c68:	08003d50 	.word	0x08003d50
 8000c6c:	20000030 	.word	0x20000030
 8000c70:	20000078 	.word	0x20000078
 8000c74:	08003d58 	.word	0x08003d58
 8000c78:	20000190 	.word	0x20000190
 8000c7c:	40010800 	.word	0x40010800
 8000c80:	08003da4 	.word	0x08003da4
 8000c84:	08003d64 	.word	0x08003d64
 8000c88:	08003d70 	.word	0x08003d70
 8000c8c:	08003d78 	.word	0x08003d78
 8000c90:	08003d80 	.word	0x08003d80
 8000c94:	08003dac 	.word	0x08003dac
    	    			}
    	    		}
    	    	}


    	    if((keyboard == '0' || keyboard == '1' || keyboard == '2' ||
 8000c98:	4b61      	ldr	r3, [pc, #388]	; (8000e20 <main+0x44c>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b30      	cmp	r3, #48	; 0x30
 8000c9e:	d023      	beq.n	8000ce8 <main+0x314>
 8000ca0:	4b5f      	ldr	r3, [pc, #380]	; (8000e20 <main+0x44c>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b31      	cmp	r3, #49	; 0x31
 8000ca6:	d01f      	beq.n	8000ce8 <main+0x314>
 8000ca8:	4b5d      	ldr	r3, [pc, #372]	; (8000e20 <main+0x44c>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b32      	cmp	r3, #50	; 0x32
 8000cae:	d01b      	beq.n	8000ce8 <main+0x314>
    	    	keyboard == '3' || keyboard == '4' || keyboard == '5' ||
 8000cb0:	4b5b      	ldr	r3, [pc, #364]	; (8000e20 <main+0x44c>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
    	    if((keyboard == '0' || keyboard == '1' || keyboard == '2' ||
 8000cb4:	2b33      	cmp	r3, #51	; 0x33
 8000cb6:	d017      	beq.n	8000ce8 <main+0x314>
    	    	keyboard == '3' || keyboard == '4' || keyboard == '5' ||
 8000cb8:	4b59      	ldr	r3, [pc, #356]	; (8000e20 <main+0x44c>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	2b34      	cmp	r3, #52	; 0x34
 8000cbe:	d013      	beq.n	8000ce8 <main+0x314>
 8000cc0:	4b57      	ldr	r3, [pc, #348]	; (8000e20 <main+0x44c>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2b35      	cmp	r3, #53	; 0x35
 8000cc6:	d00f      	beq.n	8000ce8 <main+0x314>
				keyboard == '6' || keyboard == '7' || keyboard == '8' ||
 8000cc8:	4b55      	ldr	r3, [pc, #340]	; (8000e20 <main+0x44c>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
    	    	keyboard == '3' || keyboard == '4' || keyboard == '5' ||
 8000ccc:	2b36      	cmp	r3, #54	; 0x36
 8000cce:	d00b      	beq.n	8000ce8 <main+0x314>
				keyboard == '6' || keyboard == '7' || keyboard == '8' ||
 8000cd0:	4b53      	ldr	r3, [pc, #332]	; (8000e20 <main+0x44c>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b37      	cmp	r3, #55	; 0x37
 8000cd6:	d007      	beq.n	8000ce8 <main+0x314>
 8000cd8:	4b51      	ldr	r3, [pc, #324]	; (8000e20 <main+0x44c>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b38      	cmp	r3, #56	; 0x38
 8000cde:	d003      	beq.n	8000ce8 <main+0x314>
				keyboard == '9') && posArray < 10 ){
 8000ce0:	4b4f      	ldr	r3, [pc, #316]	; (8000e20 <main+0x44c>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
				keyboard == '6' || keyboard == '7' || keyboard == '8' ||
 8000ce4:	2b39      	cmp	r3, #57	; 0x39
 8000ce6:	d11c      	bne.n	8000d22 <main+0x34e>
				keyboard == '9') && posArray < 10 ){
 8000ce8:	4b4e      	ldr	r3, [pc, #312]	; (8000e24 <main+0x450>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b09      	cmp	r3, #9
 8000cee:	d818      	bhi.n	8000d22 <main+0x34e>
    	    		number[posArray] = keyboard;
 8000cf0:	4b4c      	ldr	r3, [pc, #304]	; (8000e24 <main+0x450>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4b4a      	ldr	r3, [pc, #296]	; (8000e20 <main+0x44c>)
 8000cf8:	7819      	ldrb	r1, [r3, #0]
 8000cfa:	4b4b      	ldr	r3, [pc, #300]	; (8000e28 <main+0x454>)
 8000cfc:	5499      	strb	r1, [r3, r2]
    	    		number[posArray + 1] = '\0';
 8000cfe:	4b49      	ldr	r3, [pc, #292]	; (8000e24 <main+0x450>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	3301      	adds	r3, #1
 8000d04:	4a48      	ldr	r2, [pc, #288]	; (8000e28 <main+0x454>)
 8000d06:	2100      	movs	r1, #0
 8000d08:	54d1      	strb	r1, [r2, r3]
    	    		posArray++;
 8000d0a:	4b46      	ldr	r3, [pc, #280]	; (8000e24 <main+0x450>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	b2da      	uxtb	r2, r3
 8000d12:	4b44      	ldr	r3, [pc, #272]	; (8000e24 <main+0x450>)
 8000d14:	701a      	strb	r2, [r3, #0]

    	    	lcd_write(&Lcd, keyboard);
 8000d16:	4b42      	ldr	r3, [pc, #264]	; (8000e20 <main+0x44c>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4843      	ldr	r0, [pc, #268]	; (8000e2c <main+0x458>)
 8000d1e:	f7ff fd4d 	bl	80007bc <lcd_write>
    	    }

    	    if(keyboard == 'D'){
 8000d22:	4b3f      	ldr	r3, [pc, #252]	; (8000e20 <main+0x44c>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2b44      	cmp	r3, #68	; 0x44
 8000d28:	d154      	bne.n	8000dd4 <main+0x400>
    	    	connectionSIM808();
 8000d2a:	f000 f8a9 	bl	8000e80 <connectionSIM808>
    	    	if(posArray == 10){
 8000d2e:	4b3d      	ldr	r3, [pc, #244]	; (8000e24 <main+0x450>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	2b0a      	cmp	r3, #10
 8000d34:	d14e      	bne.n	8000dd4 <main+0x400>
    	    		char at_command[15] = "ATD";
 8000d36:	4b3e      	ldr	r3, [pc, #248]	; (8000e30 <main+0x45c>)
 8000d38:	607b      	str	r3, [r7, #4]
 8000d3a:	f107 0308 	add.w	r3, r7, #8
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	f8c3 2007 	str.w	r2, [r3, #7]
    	    		strcat(at_command, number);
 8000d48:	1d3b      	adds	r3, r7, #4
 8000d4a:	4937      	ldr	r1, [pc, #220]	; (8000e28 <main+0x454>)
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f002 ffa9 	bl	8003ca4 <strcat>
    	    		at_command[13] = ';';
 8000d52:	233b      	movs	r3, #59	; 0x3b
 8000d54:	747b      	strb	r3, [r7, #17]
    	    		at_command[14] = '\0';
 8000d56:	2300      	movs	r3, #0
 8000d58:	74bb      	strb	r3, [r7, #18]
    	    		at_command[14] = 0x0d;
 8000d5a:	230d      	movs	r3, #13
 8000d5c:	74bb      	strb	r3, [r7, #18]
    	    		HAL_UART_Transmit(&huart2, (uint8_t*)at_command, strlen(at_command), HAL_MAX_DELAY);
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff f9f3 	bl	800014c <strlen>
 8000d66:	4603      	mov	r3, r0
 8000d68:	b29a      	uxth	r2, r3
 8000d6a:	1d39      	adds	r1, r7, #4
 8000d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d70:	4830      	ldr	r0, [pc, #192]	; (8000e34 <main+0x460>)
 8000d72:	f002 f8cd 	bl	8002f10 <HAL_UART_Transmit>
    	    		HAL_TIM_Base_Start_IT(&htim3);
 8000d76:	4830      	ldr	r0, [pc, #192]	; (8000e38 <main+0x464>)
 8000d78:	f001 fc9e 	bl	80026b8 <HAL_TIM_Base_Start_IT>
    	    		lcd_clear(&Lcd);
 8000d7c:	482b      	ldr	r0, [pc, #172]	; (8000e2c <main+0x458>)
 8000d7e:	f7ff fc68 	bl	8000652 <lcd_clear>
    	    		lcd_home(&Lcd);
 8000d82:	482a      	ldr	r0, [pc, #168]	; (8000e2c <main+0x458>)
 8000d84:	f7ff fc71 	bl	800066a <lcd_home>
    	    		lcd_print(&Lcd, "Marcando...");
 8000d88:	492c      	ldr	r1, [pc, #176]	; (8000e3c <main+0x468>)
 8000d8a:	4828      	ldr	r0, [pc, #160]	; (8000e2c <main+0x458>)
 8000d8c:	f7ff fcff 	bl	800078e <lcd_print>
    	    		lcd_setCursor(&Lcd, 0, 2);
 8000d90:	2202      	movs	r2, #2
 8000d92:	2100      	movs	r1, #0
 8000d94:	4825      	ldr	r0, [pc, #148]	; (8000e2c <main+0x458>)
 8000d96:	f7ff fcc8 	bl	800072a <lcd_setCursor>
    	    		lcd_print(&Lcd, number);
 8000d9a:	4923      	ldr	r1, [pc, #140]	; (8000e28 <main+0x454>)
 8000d9c:	4823      	ldr	r0, [pc, #140]	; (8000e2c <main+0x458>)
 8000d9e:	f7ff fcf6 	bl	800078e <lcd_print>
    	    		while(1){

    	    			keyboard = Keypad_Get_Char();
 8000da2:	f7ff f9db 	bl	800015c <Keypad_Get_Char>
 8000da6:	4603      	mov	r3, r0
 8000da8:	461a      	mov	r2, r3
 8000daa:	4b1d      	ldr	r3, [pc, #116]	; (8000e20 <main+0x44c>)
 8000dac:	701a      	strb	r2, [r3, #0]
    	    			if(cont == 20){
 8000dae:	4b24      	ldr	r3, [pc, #144]	; (8000e40 <main+0x46c>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	2b14      	cmp	r3, #20
 8000db4:	d108      	bne.n	8000dc8 <main+0x3f4>
    	    				HAL_TIM_Base_Stop_IT(&htim3);
 8000db6:	4820      	ldr	r0, [pc, #128]	; (8000e38 <main+0x464>)
 8000db8:	f001 fcd0 	bl	800275c <HAL_TIM_Base_Stop_IT>
    	    				cont= 0;
 8000dbc:	4b20      	ldr	r3, [pc, #128]	; (8000e40 <main+0x46c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	701a      	strb	r2, [r3, #0]
    	    				endCall();
 8000dc2:	f000 f8ef 	bl	8000fa4 <endCall>
    	    				break;
 8000dc6:	e005      	b.n	8000dd4 <main+0x400>
    	    			}
    	    			if(keyboard == 'A'){
 8000dc8:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <main+0x44c>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b41      	cmp	r3, #65	; 0x41
 8000dce:	d1e8      	bne.n	8000da2 <main+0x3ce>
    	    				endCall();
 8000dd0:	f000 f8e8 	bl	8000fa4 <endCall>




    	    }
    	    if(keyboard == 'A'){
 8000dd4:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <main+0x44c>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b41      	cmp	r3, #65	; 0x41
 8000dda:	f47f ae54 	bne.w	8000a86 <main+0xb2>
    	    	if (posArray > 0) {
 8000dde:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <main+0x450>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f43f ae4f 	beq.w	8000a86 <main+0xb2>
    	    		posArray--;
 8000de8:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <main+0x450>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	3b01      	subs	r3, #1
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <main+0x450>)
 8000df2:	701a      	strb	r2, [r3, #0]
    	    		number[posArray] = '\0';
 8000df4:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <main+0x450>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	461a      	mov	r2, r3
 8000dfa:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <main+0x454>)
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	5499      	strb	r1, [r3, r2]
    	    		lcd_clearRow1(&Lcd);
 8000e00:	480a      	ldr	r0, [pc, #40]	; (8000e2c <main+0x458>)
 8000e02:	f7ff fdc5 	bl	8000990 <lcd_clearRow1>
    	    		lcd_print(&Lcd,number);
 8000e06:	4908      	ldr	r1, [pc, #32]	; (8000e28 <main+0x454>)
 8000e08:	4808      	ldr	r0, [pc, #32]	; (8000e2c <main+0x458>)
 8000e0a:	f7ff fcc0 	bl	800078e <lcd_print>
 8000e0e:	e63a      	b.n	8000a86 <main+0xb2>
    	    	}
    	    }

    	    	} else{
    	    		if(keyboard == '*'){
 8000e10:	4b03      	ldr	r3, [pc, #12]	; (8000e20 <main+0x44c>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	2b2a      	cmp	r3, #42	; 0x2a
 8000e16:	f47f ae36 	bne.w	8000a86 <main+0xb2>
    	    			connectionSIM808();
 8000e1a:	f000 f831 	bl	8000e80 <connectionSIM808>
    	 keyboard = Keypad_Get_Char();
 8000e1e:	e632      	b.n	8000a86 <main+0xb2>
 8000e20:	20000148 	.word	0x20000148
 8000e24:	20000157 	.word	0x20000157
 8000e28:	2000014c 	.word	0x2000014c
 8000e2c:	20000108 	.word	0x20000108
 8000e30:	00445441 	.word	0x00445441
 8000e34:	200000c0 	.word	0x200000c0
 8000e38:	20000078 	.word	0x20000078
 8000e3c:	08003d8c 	.word	0x08003d8c
 8000e40:	20000190 	.word	0x20000190

08000e44 <initialScreen>:
    /* USER CODE BEGIN 3 */
    }
  /* USER CODE END 3 */
}

void initialScreen(){
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
	lcd_clear(&Lcd);
 8000e48:	480b      	ldr	r0, [pc, #44]	; (8000e78 <initialScreen+0x34>)
 8000e4a:	f7ff fc02 	bl	8000652 <lcd_clear>
	lcd_home(&Lcd);
 8000e4e:	480a      	ldr	r0, [pc, #40]	; (8000e78 <initialScreen+0x34>)
 8000e50:	f7ff fc0b 	bl	800066a <lcd_home>
	lcd_print(&Lcd, "Numero:");
 8000e54:	4909      	ldr	r1, [pc, #36]	; (8000e7c <initialScreen+0x38>)
 8000e56:	4808      	ldr	r0, [pc, #32]	; (8000e78 <initialScreen+0x34>)
 8000e58:	f7ff fc99 	bl	800078e <lcd_print>
	lcd_cursor(&Lcd);
 8000e5c:	4806      	ldr	r0, [pc, #24]	; (8000e78 <initialScreen+0x34>)
 8000e5e:	f7ff fc49 	bl	80006f4 <lcd_cursor>
	lcd_setCursor(&Lcd, 0, 1);
 8000e62:	2201      	movs	r2, #1
 8000e64:	2100      	movs	r1, #0
 8000e66:	4804      	ldr	r0, [pc, #16]	; (8000e78 <initialScreen+0x34>)
 8000e68:	f7ff fc5f 	bl	800072a <lcd_setCursor>
	lcd_blink(&Lcd);
 8000e6c:	4802      	ldr	r0, [pc, #8]	; (8000e78 <initialScreen+0x34>)
 8000e6e:	f7ff fc26 	bl	80006be <lcd_blink>
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000108 	.word	0x20000108
 8000e7c:	08003db4 	.word	0x08003db4

08000e80 <connectionSIM808>:


void connectionSIM808(){
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0

	HAL_UART_Receive(&huart2, checkConectionRX, sizeof(checkConectionRX), 20);
 8000e86:	2314      	movs	r3, #20
 8000e88:	220f      	movs	r2, #15
 8000e8a:	4921      	ldr	r1, [pc, #132]	; (8000f10 <connectionSIM808+0x90>)
 8000e8c:	4821      	ldr	r0, [pc, #132]	; (8000f14 <connectionSIM808+0x94>)
 8000e8e:	f002 f8c2 	bl	8003016 <HAL_UART_Receive>
	char at_command[] = "AT\r\n";
 8000e92:	4a21      	ldr	r2, [pc, #132]	; (8000f18 <connectionSIM808+0x98>)
 8000e94:	463b      	mov	r3, r7
 8000e96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e9a:	6018      	str	r0, [r3, #0]
 8000e9c:	3304      	adds	r3, #4
 8000e9e:	7019      	strb	r1, [r3, #0]
	  	HAL_UART_Transmit(&huart2, (uint8_t*)at_command, strlen(at_command), HAL_MAX_DELAY);
 8000ea0:	463b      	mov	r3, r7
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff f952 	bl	800014c <strlen>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	b29a      	uxth	r2, r3
 8000eac:	4639      	mov	r1, r7
 8000eae:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb2:	4818      	ldr	r0, [pc, #96]	; (8000f14 <connectionSIM808+0x94>)
 8000eb4:	f002 f82c 	bl	8002f10 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart2, checkConectionRX, 20,1000);
 8000eb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ebc:	2214      	movs	r2, #20
 8000ebe:	4914      	ldr	r1, [pc, #80]	; (8000f10 <connectionSIM808+0x90>)
 8000ec0:	4814      	ldr	r0, [pc, #80]	; (8000f14 <connectionSIM808+0x94>)
 8000ec2:	f002 f8a8 	bl	8003016 <HAL_UART_Receive>
	if(strstr((char*)checkConectionRX, "OK") != NULL){
 8000ec6:	4915      	ldr	r1, [pc, #84]	; (8000f1c <connectionSIM808+0x9c>)
 8000ec8:	4811      	ldr	r0, [pc, #68]	; (8000f10 <connectionSIM808+0x90>)
 8000eca:	f002 fefa 	bl	8003cc2 <strstr>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d003      	beq.n	8000edc <connectionSIM808+0x5c>
		hasConnection = 1;
 8000ed4:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <connectionSIM808+0xa0>)
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	701a      	strb	r2, [r3, #0]
				lcd_print(&Lcd, "Presiona *");
				hasConnection = 0;

	}

}
 8000eda:	e015      	b.n	8000f08 <connectionSIM808+0x88>
		lcd_clear(&Lcd);
 8000edc:	4811      	ldr	r0, [pc, #68]	; (8000f24 <connectionSIM808+0xa4>)
 8000ede:	f7ff fbb8 	bl	8000652 <lcd_clear>
				lcd_home(&Lcd);
 8000ee2:	4810      	ldr	r0, [pc, #64]	; (8000f24 <connectionSIM808+0xa4>)
 8000ee4:	f7ff fbc1 	bl	800066a <lcd_home>
				lcd_print(&Lcd, "Conectando...");
 8000ee8:	490f      	ldr	r1, [pc, #60]	; (8000f28 <connectionSIM808+0xa8>)
 8000eea:	480e      	ldr	r0, [pc, #56]	; (8000f24 <connectionSIM808+0xa4>)
 8000eec:	f7ff fc4f 	bl	800078e <lcd_print>
				lcd_setCursor(&Lcd, 0, 1);
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	480b      	ldr	r0, [pc, #44]	; (8000f24 <connectionSIM808+0xa4>)
 8000ef6:	f7ff fc18 	bl	800072a <lcd_setCursor>
				lcd_print(&Lcd, "Presiona *");
 8000efa:	490c      	ldr	r1, [pc, #48]	; (8000f2c <connectionSIM808+0xac>)
 8000efc:	4809      	ldr	r0, [pc, #36]	; (8000f24 <connectionSIM808+0xa4>)
 8000efe:	f7ff fc46 	bl	800078e <lcd_print>
				hasConnection = 0;
 8000f02:	4b07      	ldr	r3, [pc, #28]	; (8000f20 <connectionSIM808+0xa0>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	701a      	strb	r2, [r3, #0]
}
 8000f08:	bf00      	nop
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	2000016c 	.word	0x2000016c
 8000f14:	200000c0 	.word	0x200000c0
 8000f18:	08003ddc 	.word	0x08003ddc
 8000f1c:	08003dbc 	.word	0x08003dbc
 8000f20:	20000000 	.word	0x20000000
 8000f24:	20000108 	.word	0x20000108
 8000f28:	08003dc0 	.word	0x08003dc0
 8000f2c:	08003dd0 	.word	0x08003dd0

08000f30 <isFinishedCall>:

int isFinishedCall(){
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0

	HAL_UART_Receive(&huart2, isCallRX, 20, 20);
 8000f36:	2314      	movs	r3, #20
 8000f38:	2214      	movs	r2, #20
 8000f3a:	4916      	ldr	r1, [pc, #88]	; (8000f94 <isFinishedCall+0x64>)
 8000f3c:	4816      	ldr	r0, [pc, #88]	; (8000f98 <isFinishedCall+0x68>)
 8000f3e:	f002 f86a 	bl	8003016 <HAL_UART_Receive>
	char at_command[] = "ATA\r\n";
 8000f42:	4a16      	ldr	r2, [pc, #88]	; (8000f9c <isFinishedCall+0x6c>)
 8000f44:	463b      	mov	r3, r7
 8000f46:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f4a:	6018      	str	r0, [r3, #0]
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	8019      	strh	r1, [r3, #0]
	  	HAL_UART_Transmit(&huart2, (uint8_t*)at_command, strlen(at_command), HAL_MAX_DELAY);
 8000f50:	463b      	mov	r3, r7
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff f8fa 	bl	800014c <strlen>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	b29a      	uxth	r2, r3
 8000f5c:	4639      	mov	r1, r7
 8000f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f62:	480d      	ldr	r0, [pc, #52]	; (8000f98 <isFinishedCall+0x68>)
 8000f64:	f001 ffd4 	bl	8002f10 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart2, isCallRX, 20,1500);
 8000f68:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8000f6c:	2214      	movs	r2, #20
 8000f6e:	4909      	ldr	r1, [pc, #36]	; (8000f94 <isFinishedCall+0x64>)
 8000f70:	4809      	ldr	r0, [pc, #36]	; (8000f98 <isFinishedCall+0x68>)
 8000f72:	f002 f850 	bl	8003016 <HAL_UART_Receive>
	if(strstr((char*)isCallRX, "ERROR") != NULL){
 8000f76:	490a      	ldr	r1, [pc, #40]	; (8000fa0 <isFinishedCall+0x70>)
 8000f78:	4806      	ldr	r0, [pc, #24]	; (8000f94 <isFinishedCall+0x64>)
 8000f7a:	f002 fea2 	bl	8003cc2 <strstr>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <isFinishedCall+0x58>
		return 1;
 8000f84:	2301      	movs	r3, #1
 8000f86:	e000      	b.n	8000f8a <isFinishedCall+0x5a>
	} else{
		return 0;
 8000f88:	2300      	movs	r3, #0
	}

}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	2000017c 	.word	0x2000017c
 8000f98:	200000c0 	.word	0x200000c0
 8000f9c:	08003dec 	.word	0x08003dec
 8000fa0:	08003de4 	.word	0x08003de4

08000fa4 <endCall>:

void endCall(){
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
	char at_command[] = "ATH0\r\n";
 8000faa:	4a17      	ldr	r2, [pc, #92]	; (8001008 <endCall+0x64>)
 8000fac:	1d3b      	adds	r3, r7, #4
 8000fae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fb2:	6018      	str	r0, [r3, #0]
 8000fb4:	3304      	adds	r3, #4
 8000fb6:	8019      	strh	r1, [r3, #0]
 8000fb8:	3302      	adds	r3, #2
 8000fba:	0c0a      	lsrs	r2, r1, #16
 8000fbc:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)at_command, strlen(at_command), HAL_MAX_DELAY);
 8000fbe:	1d3b      	adds	r3, r7, #4
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff f8c3 	bl	800014c <strlen>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	b29a      	uxth	r2, r3
 8000fca:	1d39      	adds	r1, r7, #4
 8000fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd0:	480e      	ldr	r0, [pc, #56]	; (800100c <endCall+0x68>)
 8000fd2:	f001 ff9d 	bl	8002f10 <HAL_UART_Transmit>
	for (int i = 0; i < 10; i++) {
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	e007      	b.n	8000fec <endCall+0x48>
		number[i] = '\0';
 8000fdc:	4a0c      	ldr	r2, [pc, #48]	; (8001010 <endCall+0x6c>)
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 10; i++) {
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	2b09      	cmp	r3, #9
 8000ff0:	ddf4      	ble.n	8000fdc <endCall+0x38>
	}
	posArray = 0;
 8000ff2:	4b08      	ldr	r3, [pc, #32]	; (8001014 <endCall+0x70>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	701a      	strb	r2, [r3, #0]
	flag = 1;
 8000ff8:	4b07      	ldr	r3, [pc, #28]	; (8001018 <endCall+0x74>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	701a      	strb	r2, [r3, #0]
}
 8000ffe:	bf00      	nop
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	08003df4 	.word	0x08003df4
 800100c:	200000c0 	.word	0x200000c0
 8001010:	2000014c 	.word	0x2000014c
 8001014:	20000157 	.word	0x20000157
 8001018:	20000001 	.word	0x20000001

0800101c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b090      	sub	sp, #64	; 0x40
 8001020:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001022:	f107 0318 	add.w	r3, r7, #24
 8001026:	2228      	movs	r2, #40	; 0x28
 8001028:	2100      	movs	r1, #0
 800102a:	4618      	mov	r0, r3
 800102c:	f002 fe32 	bl	8003c94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001030:	1d3b      	adds	r3, r7, #4
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
 800103a:	60da      	str	r2, [r3, #12]
 800103c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800103e:	2302      	movs	r3, #2
 8001040:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001042:	2301      	movs	r3, #1
 8001044:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001046:	2310      	movs	r3, #16
 8001048:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800104a:	2300      	movs	r3, #0
 800104c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800104e:	f107 0318 	add.w	r3, r7, #24
 8001052:	4618      	mov	r0, r3
 8001054:	f000 fed0 	bl	8001df8 <HAL_RCC_OscConfig>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800105e:	f000 f97d 	bl	800135c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001062:	230f      	movs	r3, #15
 8001064:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001066:	2300      	movs	r3, #0
 8001068:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800106e:	2300      	movs	r3, #0
 8001070:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001076:	1d3b      	adds	r3, r7, #4
 8001078:	2100      	movs	r1, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f001 f93e 	bl	80022fc <HAL_RCC_ClockConfig>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001086:	f000 f969 	bl	800135c <Error_Handler>
  }
}
 800108a:	bf00      	nop
 800108c:	3740      	adds	r7, #64	; 0x40
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800109a:	f107 0308 	add.w	r3, r7, #8
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a8:	463b      	mov	r3, r7
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010b0:	4b1d      	ldr	r3, [pc, #116]	; (8001128 <MX_TIM2_Init+0x94>)
 80010b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 80010b8:	4b1b      	ldr	r3, [pc, #108]	; (8001128 <MX_TIM2_Init+0x94>)
 80010ba:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80010be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c0:	4b19      	ldr	r3, [pc, #100]	; (8001128 <MX_TIM2_Init+0x94>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50;
 80010c6:	4b18      	ldr	r3, [pc, #96]	; (8001128 <MX_TIM2_Init+0x94>)
 80010c8:	2232      	movs	r2, #50	; 0x32
 80010ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010cc:	4b16      	ldr	r3, [pc, #88]	; (8001128 <MX_TIM2_Init+0x94>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010d2:	4b15      	ldr	r3, [pc, #84]	; (8001128 <MX_TIM2_Init+0x94>)
 80010d4:	2280      	movs	r2, #128	; 0x80
 80010d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010d8:	4813      	ldr	r0, [pc, #76]	; (8001128 <MX_TIM2_Init+0x94>)
 80010da:	f001 fa9d 	bl	8002618 <HAL_TIM_Base_Init>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80010e4:	f000 f93a 	bl	800135c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010ee:	f107 0308 	add.w	r3, r7, #8
 80010f2:	4619      	mov	r1, r3
 80010f4:	480c      	ldr	r0, [pc, #48]	; (8001128 <MX_TIM2_Init+0x94>)
 80010f6:	f001 fc67 	bl	80029c8 <HAL_TIM_ConfigClockSource>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001100:	f000 f92c 	bl	800135c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001104:	2300      	movs	r3, #0
 8001106:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001108:	2300      	movs	r3, #0
 800110a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800110c:	463b      	mov	r3, r7
 800110e:	4619      	mov	r1, r3
 8001110:	4805      	ldr	r0, [pc, #20]	; (8001128 <MX_TIM2_Init+0x94>)
 8001112:	f001 fe3d 	bl	8002d90 <HAL_TIMEx_MasterConfigSynchronization>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800111c:	f000 f91e 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001120:	bf00      	nop
 8001122:	3718      	adds	r7, #24
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000030 	.word	0x20000030

0800112c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001132:	f107 0308 	add.w	r3, r7, #8
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001140:	463b      	mov	r3, r7
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001148:	4b1d      	ldr	r3, [pc, #116]	; (80011c0 <MX_TIM3_Init+0x94>)
 800114a:	4a1e      	ldr	r2, [pc, #120]	; (80011c4 <MX_TIM3_Init+0x98>)
 800114c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8999;
 800114e:	4b1c      	ldr	r3, [pc, #112]	; (80011c0 <MX_TIM3_Init+0x94>)
 8001150:	f242 3227 	movw	r2, #8999	; 0x2327
 8001154:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001156:	4b1a      	ldr	r3, [pc, #104]	; (80011c0 <MX_TIM3_Init+0x94>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800115c:	4b18      	ldr	r3, [pc, #96]	; (80011c0 <MX_TIM3_Init+0x94>)
 800115e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001162:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001164:	4b16      	ldr	r3, [pc, #88]	; (80011c0 <MX_TIM3_Init+0x94>)
 8001166:	2200      	movs	r2, #0
 8001168:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800116a:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <MX_TIM3_Init+0x94>)
 800116c:	2280      	movs	r2, #128	; 0x80
 800116e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001170:	4813      	ldr	r0, [pc, #76]	; (80011c0 <MX_TIM3_Init+0x94>)
 8001172:	f001 fa51 	bl	8002618 <HAL_TIM_Base_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800117c:	f000 f8ee 	bl	800135c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001180:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001184:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001186:	f107 0308 	add.w	r3, r7, #8
 800118a:	4619      	mov	r1, r3
 800118c:	480c      	ldr	r0, [pc, #48]	; (80011c0 <MX_TIM3_Init+0x94>)
 800118e:	f001 fc1b 	bl	80029c8 <HAL_TIM_ConfigClockSource>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001198:	f000 f8e0 	bl	800135c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800119c:	2300      	movs	r3, #0
 800119e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a0:	2300      	movs	r3, #0
 80011a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011a4:	463b      	mov	r3, r7
 80011a6:	4619      	mov	r1, r3
 80011a8:	4805      	ldr	r0, [pc, #20]	; (80011c0 <MX_TIM3_Init+0x94>)
 80011aa:	f001 fdf1 	bl	8002d90 <HAL_TIMEx_MasterConfigSynchronization>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80011b4:	f000 f8d2 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011b8:	bf00      	nop
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000078 	.word	0x20000078
 80011c4:	40000400 	.word	0x40000400

080011c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011cc:	4b11      	ldr	r3, [pc, #68]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 80011ce:	4a12      	ldr	r2, [pc, #72]	; (8001218 <MX_USART2_UART_Init+0x50>)
 80011d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80011d2:	4b10      	ldr	r3, [pc, #64]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 80011d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80011d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011da:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011e6:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011ec:	4b09      	ldr	r3, [pc, #36]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 80011ee:	220c      	movs	r2, #12
 80011f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011f2:	4b08      	ldr	r3, [pc, #32]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f8:	4b06      	ldr	r3, [pc, #24]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011fe:	4805      	ldr	r0, [pc, #20]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 8001200:	f001 fe36 	bl	8002e70 <HAL_UART_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800120a:	f000 f8a7 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	200000c0 	.word	0x200000c0
 8001218:	40004400 	.word	0x40004400

0800121c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b088      	sub	sp, #32
 8001220:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001222:	f107 0310 	add.w	r3, r7, #16
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001230:	4b35      	ldr	r3, [pc, #212]	; (8001308 <MX_GPIO_Init+0xec>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	4a34      	ldr	r2, [pc, #208]	; (8001308 <MX_GPIO_Init+0xec>)
 8001236:	f043 0320 	orr.w	r3, r3, #32
 800123a:	6193      	str	r3, [r2, #24]
 800123c:	4b32      	ldr	r3, [pc, #200]	; (8001308 <MX_GPIO_Init+0xec>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	f003 0320 	and.w	r3, r3, #32
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001248:	4b2f      	ldr	r3, [pc, #188]	; (8001308 <MX_GPIO_Init+0xec>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	4a2e      	ldr	r2, [pc, #184]	; (8001308 <MX_GPIO_Init+0xec>)
 800124e:	f043 0304 	orr.w	r3, r3, #4
 8001252:	6193      	str	r3, [r2, #24]
 8001254:	4b2c      	ldr	r3, [pc, #176]	; (8001308 <MX_GPIO_Init+0xec>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	f003 0304 	and.w	r3, r3, #4
 800125c:	60bb      	str	r3, [r7, #8]
 800125e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001260:	4b29      	ldr	r3, [pc, #164]	; (8001308 <MX_GPIO_Init+0xec>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	4a28      	ldr	r2, [pc, #160]	; (8001308 <MX_GPIO_Init+0xec>)
 8001266:	f043 0308 	orr.w	r3, r3, #8
 800126a:	6193      	str	r3, [r2, #24]
 800126c:	4b26      	ldr	r3, [pc, #152]	; (8001308 <MX_GPIO_Init+0xec>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	f003 0308 	and.w	r3, r3, #8
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_EN_Pin|LCD_RS_Pin|D7_Pin|D6_Pin
 8001278:	2200      	movs	r2, #0
 800127a:	f24f 71c2 	movw	r1, #63426	; 0xf7c2
 800127e:	4823      	ldr	r0, [pc, #140]	; (800130c <MX_GPIO_Init+0xf0>)
 8001280:	f000 fd89 	bl	8001d96 <HAL_GPIO_WritePin>
                          |D5_Pin|D4_Pin|r4_Pin|r3_Pin
                          |r2_Pin|r1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 8001284:	2200      	movs	r2, #0
 8001286:	f44f 7180 	mov.w	r1, #256	; 0x100
 800128a:	4821      	ldr	r0, [pc, #132]	; (8001310 <MX_GPIO_Init+0xf4>)
 800128c:	f000 fd83 	bl	8001d96 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_EN_Pin LCD_RS_Pin D7_Pin D6_Pin
                           D5_Pin D4_Pin r4_Pin r3_Pin
                           r2_Pin r1_Pin */
  GPIO_InitStruct.Pin = LCD_EN_Pin|LCD_RS_Pin|D7_Pin|D6_Pin
 8001290:	f24f 73c2 	movw	r3, #63426	; 0xf7c2
 8001294:	613b      	str	r3, [r7, #16]
                          |D5_Pin|D4_Pin|r4_Pin|r3_Pin
                          |r2_Pin|r1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001296:	2301      	movs	r3, #1
 8001298:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129e:	2302      	movs	r3, #2
 80012a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a2:	f107 0310 	add.w	r3, r7, #16
 80012a6:	4619      	mov	r1, r3
 80012a8:	4818      	ldr	r0, [pc, #96]	; (800130c <MX_GPIO_Init+0xf0>)
 80012aa:	f000 fbd9 	bl	8001a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : buzzer_Pin */
  GPIO_InitStruct.Pin = buzzer_Pin;
 80012ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b4:	2301      	movs	r3, #1
 80012b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012bc:	2302      	movs	r3, #2
 80012be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(buzzer_GPIO_Port, &GPIO_InitStruct);
 80012c0:	f107 0310 	add.w	r3, r7, #16
 80012c4:	4619      	mov	r1, r3
 80012c6:	4812      	ldr	r0, [pc, #72]	; (8001310 <MX_GPIO_Init+0xf4>)
 80012c8:	f000 fbca 	bl	8001a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : c4_Pin */
  GPIO_InitStruct.Pin = c4_Pin;
 80012cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012d6:	2301      	movs	r3, #1
 80012d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(c4_GPIO_Port, &GPIO_InitStruct);
 80012da:	f107 0310 	add.w	r3, r7, #16
 80012de:	4619      	mov	r1, r3
 80012e0:	480b      	ldr	r0, [pc, #44]	; (8001310 <MX_GPIO_Init+0xf4>)
 80012e2:	f000 fbbd 	bl	8001a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : c3_Pin c2_Pin c1_Pin */
  GPIO_InitStruct.Pin = c3_Pin|c2_Pin|c1_Pin;
 80012e6:	2338      	movs	r3, #56	; 0x38
 80012e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012ee:	2301      	movs	r3, #1
 80012f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f2:	f107 0310 	add.w	r3, r7, #16
 80012f6:	4619      	mov	r1, r3
 80012f8:	4804      	ldr	r0, [pc, #16]	; (800130c <MX_GPIO_Init+0xf0>)
 80012fa:	f000 fbb1 	bl	8001a60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012fe:	bf00      	nop
 8001300:	3720      	adds	r7, #32
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40021000 	.word	0x40021000
 800130c:	40010c00 	.word	0x40010c00
 8001310:	40010800 	.word	0x40010800

08001314 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  if(htim->Instance == TIM2){
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001324:	d104      	bne.n	8001330 <HAL_TIM_PeriodElapsedCallback+0x1c>
	  HAL_GPIO_TogglePin(buzzer_GPIO_Port, buzzer_Pin);
 8001326:	f44f 7180 	mov.w	r1, #256	; 0x100
 800132a:	4809      	ldr	r0, [pc, #36]	; (8001350 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800132c:	f000 fd4b 	bl	8001dc6 <HAL_GPIO_TogglePin>
  }

  if(htim->Instance == TIM3){
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a07      	ldr	r2, [pc, #28]	; (8001354 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d105      	bne.n	8001346 <HAL_TIM_PeriodElapsedCallback+0x32>
	  cont++;
 800133a:	4b07      	ldr	r3, [pc, #28]	; (8001358 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	3301      	adds	r3, #1
 8001340:	b2da      	uxtb	r2, r3
 8001342:	4b05      	ldr	r3, [pc, #20]	; (8001358 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001344:	701a      	strb	r2, [r3, #0]
  }

}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40010800 	.word	0x40010800
 8001354:	40000400 	.word	0x40000400
 8001358:	20000190 	.word	0x20000190

0800135c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001360:	b672      	cpsid	i
}
 8001362:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001364:	e7fe      	b.n	8001364 <Error_Handler+0x8>
	...

08001368 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <HAL_MspInit+0x5c>)
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	4a14      	ldr	r2, [pc, #80]	; (80013c4 <HAL_MspInit+0x5c>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	6193      	str	r3, [r2, #24]
 800137a:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <HAL_MspInit+0x5c>)
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001386:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <HAL_MspInit+0x5c>)
 8001388:	69db      	ldr	r3, [r3, #28]
 800138a:	4a0e      	ldr	r2, [pc, #56]	; (80013c4 <HAL_MspInit+0x5c>)
 800138c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001390:	61d3      	str	r3, [r2, #28]
 8001392:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <HAL_MspInit+0x5c>)
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800139e:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <HAL_MspInit+0x60>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	4a04      	ldr	r2, [pc, #16]	; (80013c8 <HAL_MspInit+0x60>)
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ba:	bf00      	nop
 80013bc:	3714      	adds	r7, #20
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40010000 	.word	0x40010000

080013cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013dc:	d114      	bne.n	8001408 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013de:	4b19      	ldr	r3, [pc, #100]	; (8001444 <HAL_TIM_Base_MspInit+0x78>)
 80013e0:	69db      	ldr	r3, [r3, #28]
 80013e2:	4a18      	ldr	r2, [pc, #96]	; (8001444 <HAL_TIM_Base_MspInit+0x78>)
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	61d3      	str	r3, [r2, #28]
 80013ea:	4b16      	ldr	r3, [pc, #88]	; (8001444 <HAL_TIM_Base_MspInit+0x78>)
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2100      	movs	r1, #0
 80013fa:	201c      	movs	r0, #28
 80013fc:	f000 fa47 	bl	800188e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001400:	201c      	movs	r0, #28
 8001402:	f000 fa60 	bl	80018c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001406:	e018      	b.n	800143a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a0e      	ldr	r2, [pc, #56]	; (8001448 <HAL_TIM_Base_MspInit+0x7c>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d113      	bne.n	800143a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001412:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <HAL_TIM_Base_MspInit+0x78>)
 8001414:	69db      	ldr	r3, [r3, #28]
 8001416:	4a0b      	ldr	r2, [pc, #44]	; (8001444 <HAL_TIM_Base_MspInit+0x78>)
 8001418:	f043 0302 	orr.w	r3, r3, #2
 800141c:	61d3      	str	r3, [r2, #28]
 800141e:	4b09      	ldr	r3, [pc, #36]	; (8001444 <HAL_TIM_Base_MspInit+0x78>)
 8001420:	69db      	ldr	r3, [r3, #28]
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800142a:	2200      	movs	r2, #0
 800142c:	2100      	movs	r1, #0
 800142e:	201d      	movs	r0, #29
 8001430:	f000 fa2d 	bl	800188e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001434:	201d      	movs	r0, #29
 8001436:	f000 fa46 	bl	80018c6 <HAL_NVIC_EnableIRQ>
}
 800143a:	bf00      	nop
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40021000 	.word	0x40021000
 8001448:	40000400 	.word	0x40000400

0800144c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b088      	sub	sp, #32
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 0310 	add.w	r3, r7, #16
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a1f      	ldr	r2, [pc, #124]	; (80014e4 <HAL_UART_MspInit+0x98>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d137      	bne.n	80014dc <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800146c:	4b1e      	ldr	r3, [pc, #120]	; (80014e8 <HAL_UART_MspInit+0x9c>)
 800146e:	69db      	ldr	r3, [r3, #28]
 8001470:	4a1d      	ldr	r2, [pc, #116]	; (80014e8 <HAL_UART_MspInit+0x9c>)
 8001472:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001476:	61d3      	str	r3, [r2, #28]
 8001478:	4b1b      	ldr	r3, [pc, #108]	; (80014e8 <HAL_UART_MspInit+0x9c>)
 800147a:	69db      	ldr	r3, [r3, #28]
 800147c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001484:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <HAL_UART_MspInit+0x9c>)
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	4a17      	ldr	r2, [pc, #92]	; (80014e8 <HAL_UART_MspInit+0x9c>)
 800148a:	f043 0304 	orr.w	r3, r3, #4
 800148e:	6193      	str	r3, [r2, #24]
 8001490:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <HAL_UART_MspInit+0x9c>)
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	f003 0304 	and.w	r3, r3, #4
 8001498:	60bb      	str	r3, [r7, #8]
 800149a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800149c:	2304      	movs	r3, #4
 800149e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a0:	2302      	movs	r3, #2
 80014a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014a4:	2303      	movs	r3, #3
 80014a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a8:	f107 0310 	add.w	r3, r7, #16
 80014ac:	4619      	mov	r1, r3
 80014ae:	480f      	ldr	r0, [pc, #60]	; (80014ec <HAL_UART_MspInit+0xa0>)
 80014b0:	f000 fad6 	bl	8001a60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014b4:	2308      	movs	r3, #8
 80014b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c0:	f107 0310 	add.w	r3, r7, #16
 80014c4:	4619      	mov	r1, r3
 80014c6:	4809      	ldr	r0, [pc, #36]	; (80014ec <HAL_UART_MspInit+0xa0>)
 80014c8:	f000 faca 	bl	8001a60 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014cc:	2200      	movs	r2, #0
 80014ce:	2100      	movs	r1, #0
 80014d0:	2026      	movs	r0, #38	; 0x26
 80014d2:	f000 f9dc 	bl	800188e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014d6:	2026      	movs	r0, #38	; 0x26
 80014d8:	f000 f9f5 	bl	80018c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014dc:	bf00      	nop
 80014de:	3720      	adds	r7, #32
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40004400 	.word	0x40004400
 80014e8:	40021000 	.word	0x40021000
 80014ec:	40010800 	.word	0x40010800

080014f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <NMI_Handler+0x4>

080014f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014fa:	e7fe      	b.n	80014fa <HardFault_Handler+0x4>

080014fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001500:	e7fe      	b.n	8001500 <MemManage_Handler+0x4>

08001502 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001506:	e7fe      	b.n	8001506 <BusFault_Handler+0x4>

08001508 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800150c:	e7fe      	b.n	800150c <UsageFault_Handler+0x4>

0800150e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	46bd      	mov	sp, r7
 8001516:	bc80      	pop	{r7}
 8001518:	4770      	bx	lr

0800151a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr

08001526 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001526:	b480      	push	{r7}
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	46bd      	mov	sp, r7
 800152e:	bc80      	pop	{r7}
 8001530:	4770      	bx	lr

08001532 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001536:	f000 f893 	bl	8001660 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
	...

08001540 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001544:	4802      	ldr	r0, [pc, #8]	; (8001550 <TIM2_IRQHandler+0x10>)
 8001546:	f001 f937 	bl	80027b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000030 	.word	0x20000030

08001554 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001558:	4802      	ldr	r0, [pc, #8]	; (8001564 <TIM3_IRQHandler+0x10>)
 800155a:	f001 f92d 	bl	80027b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000078 	.word	0x20000078

08001568 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800156c:	4802      	ldr	r0, [pc, #8]	; (8001578 <USART2_IRQHandler+0x10>)
 800156e:	f001 fe09 	bl	8003184 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	200000c0 	.word	0x200000c0

0800157c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr

08001588 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
     bl  SystemInit
 8001588:	f7ff fff8 	bl	800157c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800158c:	480b      	ldr	r0, [pc, #44]	; (80015bc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800158e:	490c      	ldr	r1, [pc, #48]	; (80015c0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001590:	4a0c      	ldr	r2, [pc, #48]	; (80015c4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001592:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001594:	e002      	b.n	800159c <LoopCopyDataInit>

08001596 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001596:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001598:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800159a:	3304      	adds	r3, #4

0800159c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800159c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800159e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015a0:	d3f9      	bcc.n	8001596 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015a2:	4a09      	ldr	r2, [pc, #36]	; (80015c8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015a4:	4c09      	ldr	r4, [pc, #36]	; (80015cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a8:	e001      	b.n	80015ae <LoopFillZerobss>

080015aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015ac:	3204      	adds	r2, #4

080015ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015b0:	d3fb      	bcc.n	80015aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015b2:	f002 fb9d 	bl	8003cf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015b6:	f7ff fa0d 	bl	80009d4 <main>
  bx lr
 80015ba:	4770      	bx	lr
  ldr r0, =_sdata
 80015bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015c0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80015c4:	08003e30 	.word	0x08003e30
  ldr r2, =_sbss
 80015c8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80015cc:	20000198 	.word	0x20000198

080015d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015d0:	e7fe      	b.n	80015d0 <ADC1_2_IRQHandler>
	...

080015d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015d8:	4b08      	ldr	r3, [pc, #32]	; (80015fc <HAL_Init+0x28>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a07      	ldr	r2, [pc, #28]	; (80015fc <HAL_Init+0x28>)
 80015de:	f043 0310 	orr.w	r3, r3, #16
 80015e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e4:	2003      	movs	r0, #3
 80015e6:	f000 f947 	bl	8001878 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ea:	200f      	movs	r0, #15
 80015ec:	f000 f808 	bl	8001600 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015f0:	f7ff feba 	bl	8001368 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40022000 	.word	0x40022000

08001600 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001608:	4b12      	ldr	r3, [pc, #72]	; (8001654 <HAL_InitTick+0x54>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4b12      	ldr	r3, [pc, #72]	; (8001658 <HAL_InitTick+0x58>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	4619      	mov	r1, r3
 8001612:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001616:	fbb3 f3f1 	udiv	r3, r3, r1
 800161a:	fbb2 f3f3 	udiv	r3, r2, r3
 800161e:	4618      	mov	r0, r3
 8001620:	f000 f95f 	bl	80018e2 <HAL_SYSTICK_Config>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e00e      	b.n	800164c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2b0f      	cmp	r3, #15
 8001632:	d80a      	bhi.n	800164a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001634:	2200      	movs	r2, #0
 8001636:	6879      	ldr	r1, [r7, #4]
 8001638:	f04f 30ff 	mov.w	r0, #4294967295
 800163c:	f000 f927 	bl	800188e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001640:	4a06      	ldr	r2, [pc, #24]	; (800165c <HAL_InitTick+0x5c>)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001646:	2300      	movs	r3, #0
 8001648:	e000      	b.n	800164c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
}
 800164c:	4618      	mov	r0, r3
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000004 	.word	0x20000004
 8001658:	2000000c 	.word	0x2000000c
 800165c:	20000008 	.word	0x20000008

08001660 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001664:	4b05      	ldr	r3, [pc, #20]	; (800167c <HAL_IncTick+0x1c>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	461a      	mov	r2, r3
 800166a:	4b05      	ldr	r3, [pc, #20]	; (8001680 <HAL_IncTick+0x20>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4413      	add	r3, r2
 8001670:	4a03      	ldr	r2, [pc, #12]	; (8001680 <HAL_IncTick+0x20>)
 8001672:	6013      	str	r3, [r2, #0]
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr
 800167c:	2000000c 	.word	0x2000000c
 8001680:	20000194 	.word	0x20000194

08001684 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return uwTick;
 8001688:	4b02      	ldr	r3, [pc, #8]	; (8001694 <HAL_GetTick+0x10>)
 800168a:	681b      	ldr	r3, [r3, #0]
}
 800168c:	4618      	mov	r0, r3
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr
 8001694:	20000194 	.word	0x20000194

08001698 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016a0:	f7ff fff0 	bl	8001684 <HAL_GetTick>
 80016a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016b0:	d005      	beq.n	80016be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016b2:	4b0a      	ldr	r3, [pc, #40]	; (80016dc <HAL_Delay+0x44>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	461a      	mov	r2, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	4413      	add	r3, r2
 80016bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016be:	bf00      	nop
 80016c0:	f7ff ffe0 	bl	8001684 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d8f7      	bhi.n	80016c0 <HAL_Delay+0x28>
  {
  }
}
 80016d0:	bf00      	nop
 80016d2:	bf00      	nop
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	2000000c 	.word	0x2000000c

080016e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f0:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <__NVIC_SetPriorityGrouping+0x44>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016f6:	68ba      	ldr	r2, [r7, #8]
 80016f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016fc:	4013      	ands	r3, r2
 80016fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001708:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800170c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001712:	4a04      	ldr	r2, [pc, #16]	; (8001724 <__NVIC_SetPriorityGrouping+0x44>)
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	60d3      	str	r3, [r2, #12]
}
 8001718:	bf00      	nop
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800172c:	4b04      	ldr	r3, [pc, #16]	; (8001740 <__NVIC_GetPriorityGrouping+0x18>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	0a1b      	lsrs	r3, r3, #8
 8001732:	f003 0307 	and.w	r3, r3, #7
}
 8001736:	4618      	mov	r0, r3
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800174e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001752:	2b00      	cmp	r3, #0
 8001754:	db0b      	blt.n	800176e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001756:	79fb      	ldrb	r3, [r7, #7]
 8001758:	f003 021f 	and.w	r2, r3, #31
 800175c:	4906      	ldr	r1, [pc, #24]	; (8001778 <__NVIC_EnableIRQ+0x34>)
 800175e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001762:	095b      	lsrs	r3, r3, #5
 8001764:	2001      	movs	r0, #1
 8001766:	fa00 f202 	lsl.w	r2, r0, r2
 800176a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr
 8001778:	e000e100 	.word	0xe000e100

0800177c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	6039      	str	r1, [r7, #0]
 8001786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178c:	2b00      	cmp	r3, #0
 800178e:	db0a      	blt.n	80017a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	b2da      	uxtb	r2, r3
 8001794:	490c      	ldr	r1, [pc, #48]	; (80017c8 <__NVIC_SetPriority+0x4c>)
 8001796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179a:	0112      	lsls	r2, r2, #4
 800179c:	b2d2      	uxtb	r2, r2
 800179e:	440b      	add	r3, r1
 80017a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017a4:	e00a      	b.n	80017bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	4908      	ldr	r1, [pc, #32]	; (80017cc <__NVIC_SetPriority+0x50>)
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	f003 030f 	and.w	r3, r3, #15
 80017b2:	3b04      	subs	r3, #4
 80017b4:	0112      	lsls	r2, r2, #4
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	440b      	add	r3, r1
 80017ba:	761a      	strb	r2, [r3, #24]
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	e000e100 	.word	0xe000e100
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b089      	sub	sp, #36	; 0x24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f1c3 0307 	rsb	r3, r3, #7
 80017ea:	2b04      	cmp	r3, #4
 80017ec:	bf28      	it	cs
 80017ee:	2304      	movcs	r3, #4
 80017f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	3304      	adds	r3, #4
 80017f6:	2b06      	cmp	r3, #6
 80017f8:	d902      	bls.n	8001800 <NVIC_EncodePriority+0x30>
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	3b03      	subs	r3, #3
 80017fe:	e000      	b.n	8001802 <NVIC_EncodePriority+0x32>
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001804:	f04f 32ff 	mov.w	r2, #4294967295
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	43da      	mvns	r2, r3
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	401a      	ands	r2, r3
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001818:	f04f 31ff 	mov.w	r1, #4294967295
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	fa01 f303 	lsl.w	r3, r1, r3
 8001822:	43d9      	mvns	r1, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001828:	4313      	orrs	r3, r2
         );
}
 800182a:	4618      	mov	r0, r3
 800182c:	3724      	adds	r7, #36	; 0x24
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr

08001834 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3b01      	subs	r3, #1
 8001840:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001844:	d301      	bcc.n	800184a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001846:	2301      	movs	r3, #1
 8001848:	e00f      	b.n	800186a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800184a:	4a0a      	ldr	r2, [pc, #40]	; (8001874 <SysTick_Config+0x40>)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3b01      	subs	r3, #1
 8001850:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001852:	210f      	movs	r1, #15
 8001854:	f04f 30ff 	mov.w	r0, #4294967295
 8001858:	f7ff ff90 	bl	800177c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800185c:	4b05      	ldr	r3, [pc, #20]	; (8001874 <SysTick_Config+0x40>)
 800185e:	2200      	movs	r2, #0
 8001860:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001862:	4b04      	ldr	r3, [pc, #16]	; (8001874 <SysTick_Config+0x40>)
 8001864:	2207      	movs	r2, #7
 8001866:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	e000e010 	.word	0xe000e010

08001878 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7ff ff2d 	bl	80016e0 <__NVIC_SetPriorityGrouping>
}
 8001886:	bf00      	nop
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800188e:	b580      	push	{r7, lr}
 8001890:	b086      	sub	sp, #24
 8001892:	af00      	add	r7, sp, #0
 8001894:	4603      	mov	r3, r0
 8001896:	60b9      	str	r1, [r7, #8]
 8001898:	607a      	str	r2, [r7, #4]
 800189a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018a0:	f7ff ff42 	bl	8001728 <__NVIC_GetPriorityGrouping>
 80018a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	68b9      	ldr	r1, [r7, #8]
 80018aa:	6978      	ldr	r0, [r7, #20]
 80018ac:	f7ff ff90 	bl	80017d0 <NVIC_EncodePriority>
 80018b0:	4602      	mov	r2, r0
 80018b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018b6:	4611      	mov	r1, r2
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff ff5f 	bl	800177c <__NVIC_SetPriority>
}
 80018be:	bf00      	nop
 80018c0:	3718      	adds	r7, #24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b082      	sub	sp, #8
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	4603      	mov	r3, r0
 80018ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff ff35 	bl	8001744 <__NVIC_EnableIRQ>
}
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b082      	sub	sp, #8
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f7ff ffa2 	bl	8001834 <SysTick_Config>
 80018f0:	4603      	mov	r3, r0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b085      	sub	sp, #20
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001902:	2300      	movs	r3, #0
 8001904:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d008      	beq.n	8001924 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2204      	movs	r2, #4
 8001916:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e020      	b.n	8001966 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f022 020e 	bic.w	r2, r2, #14
 8001932:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f022 0201 	bic.w	r2, r2, #1
 8001942:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800194c:	2101      	movs	r1, #1
 800194e:	fa01 f202 	lsl.w	r2, r1, r2
 8001952:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001964:	7bfb      	ldrb	r3, [r7, #15]
}
 8001966:	4618      	mov	r0, r3
 8001968:	3714      	adds	r7, #20
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr

08001970 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001978:	2300      	movs	r3, #0
 800197a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001982:	b2db      	uxtb	r3, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d005      	beq.n	8001994 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2204      	movs	r2, #4
 800198c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	73fb      	strb	r3, [r7, #15]
 8001992:	e051      	b.n	8001a38 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f022 020e 	bic.w	r2, r2, #14
 80019a2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f022 0201 	bic.w	r2, r2, #1
 80019b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a22      	ldr	r2, [pc, #136]	; (8001a44 <HAL_DMA_Abort_IT+0xd4>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d029      	beq.n	8001a12 <HAL_DMA_Abort_IT+0xa2>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a21      	ldr	r2, [pc, #132]	; (8001a48 <HAL_DMA_Abort_IT+0xd8>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d022      	beq.n	8001a0e <HAL_DMA_Abort_IT+0x9e>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a1f      	ldr	r2, [pc, #124]	; (8001a4c <HAL_DMA_Abort_IT+0xdc>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d01a      	beq.n	8001a08 <HAL_DMA_Abort_IT+0x98>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a1e      	ldr	r2, [pc, #120]	; (8001a50 <HAL_DMA_Abort_IT+0xe0>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d012      	beq.n	8001a02 <HAL_DMA_Abort_IT+0x92>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a1c      	ldr	r2, [pc, #112]	; (8001a54 <HAL_DMA_Abort_IT+0xe4>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d00a      	beq.n	80019fc <HAL_DMA_Abort_IT+0x8c>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a1b      	ldr	r2, [pc, #108]	; (8001a58 <HAL_DMA_Abort_IT+0xe8>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d102      	bne.n	80019f6 <HAL_DMA_Abort_IT+0x86>
 80019f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80019f4:	e00e      	b.n	8001a14 <HAL_DMA_Abort_IT+0xa4>
 80019f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019fa:	e00b      	b.n	8001a14 <HAL_DMA_Abort_IT+0xa4>
 80019fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a00:	e008      	b.n	8001a14 <HAL_DMA_Abort_IT+0xa4>
 8001a02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a06:	e005      	b.n	8001a14 <HAL_DMA_Abort_IT+0xa4>
 8001a08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a0c:	e002      	b.n	8001a14 <HAL_DMA_Abort_IT+0xa4>
 8001a0e:	2310      	movs	r3, #16
 8001a10:	e000      	b.n	8001a14 <HAL_DMA_Abort_IT+0xa4>
 8001a12:	2301      	movs	r3, #1
 8001a14:	4a11      	ldr	r2, [pc, #68]	; (8001a5c <HAL_DMA_Abort_IT+0xec>)
 8001a16:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d003      	beq.n	8001a38 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	4798      	blx	r3
    } 
  }
  return status;
 8001a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40020008 	.word	0x40020008
 8001a48:	4002001c 	.word	0x4002001c
 8001a4c:	40020030 	.word	0x40020030
 8001a50:	40020044 	.word	0x40020044
 8001a54:	40020058 	.word	0x40020058
 8001a58:	4002006c 	.word	0x4002006c
 8001a5c:	40020000 	.word	0x40020000

08001a60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b08b      	sub	sp, #44	; 0x2c
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a72:	e169      	b.n	8001d48 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a74:	2201      	movs	r2, #1
 8001a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	69fa      	ldr	r2, [r7, #28]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	f040 8158 	bne.w	8001d42 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	4a9a      	ldr	r2, [pc, #616]	; (8001d00 <HAL_GPIO_Init+0x2a0>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d05e      	beq.n	8001b5a <HAL_GPIO_Init+0xfa>
 8001a9c:	4a98      	ldr	r2, [pc, #608]	; (8001d00 <HAL_GPIO_Init+0x2a0>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d875      	bhi.n	8001b8e <HAL_GPIO_Init+0x12e>
 8001aa2:	4a98      	ldr	r2, [pc, #608]	; (8001d04 <HAL_GPIO_Init+0x2a4>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d058      	beq.n	8001b5a <HAL_GPIO_Init+0xfa>
 8001aa8:	4a96      	ldr	r2, [pc, #600]	; (8001d04 <HAL_GPIO_Init+0x2a4>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d86f      	bhi.n	8001b8e <HAL_GPIO_Init+0x12e>
 8001aae:	4a96      	ldr	r2, [pc, #600]	; (8001d08 <HAL_GPIO_Init+0x2a8>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d052      	beq.n	8001b5a <HAL_GPIO_Init+0xfa>
 8001ab4:	4a94      	ldr	r2, [pc, #592]	; (8001d08 <HAL_GPIO_Init+0x2a8>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d869      	bhi.n	8001b8e <HAL_GPIO_Init+0x12e>
 8001aba:	4a94      	ldr	r2, [pc, #592]	; (8001d0c <HAL_GPIO_Init+0x2ac>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d04c      	beq.n	8001b5a <HAL_GPIO_Init+0xfa>
 8001ac0:	4a92      	ldr	r2, [pc, #584]	; (8001d0c <HAL_GPIO_Init+0x2ac>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d863      	bhi.n	8001b8e <HAL_GPIO_Init+0x12e>
 8001ac6:	4a92      	ldr	r2, [pc, #584]	; (8001d10 <HAL_GPIO_Init+0x2b0>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d046      	beq.n	8001b5a <HAL_GPIO_Init+0xfa>
 8001acc:	4a90      	ldr	r2, [pc, #576]	; (8001d10 <HAL_GPIO_Init+0x2b0>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d85d      	bhi.n	8001b8e <HAL_GPIO_Init+0x12e>
 8001ad2:	2b12      	cmp	r3, #18
 8001ad4:	d82a      	bhi.n	8001b2c <HAL_GPIO_Init+0xcc>
 8001ad6:	2b12      	cmp	r3, #18
 8001ad8:	d859      	bhi.n	8001b8e <HAL_GPIO_Init+0x12e>
 8001ada:	a201      	add	r2, pc, #4	; (adr r2, 8001ae0 <HAL_GPIO_Init+0x80>)
 8001adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ae0:	08001b5b 	.word	0x08001b5b
 8001ae4:	08001b35 	.word	0x08001b35
 8001ae8:	08001b47 	.word	0x08001b47
 8001aec:	08001b89 	.word	0x08001b89
 8001af0:	08001b8f 	.word	0x08001b8f
 8001af4:	08001b8f 	.word	0x08001b8f
 8001af8:	08001b8f 	.word	0x08001b8f
 8001afc:	08001b8f 	.word	0x08001b8f
 8001b00:	08001b8f 	.word	0x08001b8f
 8001b04:	08001b8f 	.word	0x08001b8f
 8001b08:	08001b8f 	.word	0x08001b8f
 8001b0c:	08001b8f 	.word	0x08001b8f
 8001b10:	08001b8f 	.word	0x08001b8f
 8001b14:	08001b8f 	.word	0x08001b8f
 8001b18:	08001b8f 	.word	0x08001b8f
 8001b1c:	08001b8f 	.word	0x08001b8f
 8001b20:	08001b8f 	.word	0x08001b8f
 8001b24:	08001b3d 	.word	0x08001b3d
 8001b28:	08001b51 	.word	0x08001b51
 8001b2c:	4a79      	ldr	r2, [pc, #484]	; (8001d14 <HAL_GPIO_Init+0x2b4>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d013      	beq.n	8001b5a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b32:	e02c      	b.n	8001b8e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	623b      	str	r3, [r7, #32]
          break;
 8001b3a:	e029      	b.n	8001b90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	3304      	adds	r3, #4
 8001b42:	623b      	str	r3, [r7, #32]
          break;
 8001b44:	e024      	b.n	8001b90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	3308      	adds	r3, #8
 8001b4c:	623b      	str	r3, [r7, #32]
          break;
 8001b4e:	e01f      	b.n	8001b90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	330c      	adds	r3, #12
 8001b56:	623b      	str	r3, [r7, #32]
          break;
 8001b58:	e01a      	b.n	8001b90 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d102      	bne.n	8001b68 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b62:	2304      	movs	r3, #4
 8001b64:	623b      	str	r3, [r7, #32]
          break;
 8001b66:	e013      	b.n	8001b90 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d105      	bne.n	8001b7c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b70:	2308      	movs	r3, #8
 8001b72:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	69fa      	ldr	r2, [r7, #28]
 8001b78:	611a      	str	r2, [r3, #16]
          break;
 8001b7a:	e009      	b.n	8001b90 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b7c:	2308      	movs	r3, #8
 8001b7e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	69fa      	ldr	r2, [r7, #28]
 8001b84:	615a      	str	r2, [r3, #20]
          break;
 8001b86:	e003      	b.n	8001b90 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	623b      	str	r3, [r7, #32]
          break;
 8001b8c:	e000      	b.n	8001b90 <HAL_GPIO_Init+0x130>
          break;
 8001b8e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	2bff      	cmp	r3, #255	; 0xff
 8001b94:	d801      	bhi.n	8001b9a <HAL_GPIO_Init+0x13a>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	e001      	b.n	8001b9e <HAL_GPIO_Init+0x13e>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	3304      	adds	r3, #4
 8001b9e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	2bff      	cmp	r3, #255	; 0xff
 8001ba4:	d802      	bhi.n	8001bac <HAL_GPIO_Init+0x14c>
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	e002      	b.n	8001bb2 <HAL_GPIO_Init+0x152>
 8001bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bae:	3b08      	subs	r3, #8
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	210f      	movs	r1, #15
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	401a      	ands	r2, r3
 8001bc4:	6a39      	ldr	r1, [r7, #32]
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bcc:	431a      	orrs	r2, r3
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f000 80b1 	beq.w	8001d42 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001be0:	4b4d      	ldr	r3, [pc, #308]	; (8001d18 <HAL_GPIO_Init+0x2b8>)
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	4a4c      	ldr	r2, [pc, #304]	; (8001d18 <HAL_GPIO_Init+0x2b8>)
 8001be6:	f043 0301 	orr.w	r3, r3, #1
 8001bea:	6193      	str	r3, [r2, #24]
 8001bec:	4b4a      	ldr	r3, [pc, #296]	; (8001d18 <HAL_GPIO_Init+0x2b8>)
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	60bb      	str	r3, [r7, #8]
 8001bf6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bf8:	4a48      	ldr	r2, [pc, #288]	; (8001d1c <HAL_GPIO_Init+0x2bc>)
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfc:	089b      	lsrs	r3, r3, #2
 8001bfe:	3302      	adds	r3, #2
 8001c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c04:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c08:	f003 0303 	and.w	r3, r3, #3
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	220f      	movs	r2, #15
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a40      	ldr	r2, [pc, #256]	; (8001d20 <HAL_GPIO_Init+0x2c0>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d013      	beq.n	8001c4c <HAL_GPIO_Init+0x1ec>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a3f      	ldr	r2, [pc, #252]	; (8001d24 <HAL_GPIO_Init+0x2c4>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d00d      	beq.n	8001c48 <HAL_GPIO_Init+0x1e8>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4a3e      	ldr	r2, [pc, #248]	; (8001d28 <HAL_GPIO_Init+0x2c8>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d007      	beq.n	8001c44 <HAL_GPIO_Init+0x1e4>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4a3d      	ldr	r2, [pc, #244]	; (8001d2c <HAL_GPIO_Init+0x2cc>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d101      	bne.n	8001c40 <HAL_GPIO_Init+0x1e0>
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e006      	b.n	8001c4e <HAL_GPIO_Init+0x1ee>
 8001c40:	2304      	movs	r3, #4
 8001c42:	e004      	b.n	8001c4e <HAL_GPIO_Init+0x1ee>
 8001c44:	2302      	movs	r3, #2
 8001c46:	e002      	b.n	8001c4e <HAL_GPIO_Init+0x1ee>
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e000      	b.n	8001c4e <HAL_GPIO_Init+0x1ee>
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c50:	f002 0203 	and.w	r2, r2, #3
 8001c54:	0092      	lsls	r2, r2, #2
 8001c56:	4093      	lsls	r3, r2
 8001c58:	68fa      	ldr	r2, [r7, #12]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c5e:	492f      	ldr	r1, [pc, #188]	; (8001d1c <HAL_GPIO_Init+0x2bc>)
 8001c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c62:	089b      	lsrs	r3, r3, #2
 8001c64:	3302      	adds	r3, #2
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d006      	beq.n	8001c86 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c78:	4b2d      	ldr	r3, [pc, #180]	; (8001d30 <HAL_GPIO_Init+0x2d0>)
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	492c      	ldr	r1, [pc, #176]	; (8001d30 <HAL_GPIO_Init+0x2d0>)
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	608b      	str	r3, [r1, #8]
 8001c84:	e006      	b.n	8001c94 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c86:	4b2a      	ldr	r3, [pc, #168]	; (8001d30 <HAL_GPIO_Init+0x2d0>)
 8001c88:	689a      	ldr	r2, [r3, #8]
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	4928      	ldr	r1, [pc, #160]	; (8001d30 <HAL_GPIO_Init+0x2d0>)
 8001c90:	4013      	ands	r3, r2
 8001c92:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d006      	beq.n	8001cae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ca0:	4b23      	ldr	r3, [pc, #140]	; (8001d30 <HAL_GPIO_Init+0x2d0>)
 8001ca2:	68da      	ldr	r2, [r3, #12]
 8001ca4:	4922      	ldr	r1, [pc, #136]	; (8001d30 <HAL_GPIO_Init+0x2d0>)
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	60cb      	str	r3, [r1, #12]
 8001cac:	e006      	b.n	8001cbc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cae:	4b20      	ldr	r3, [pc, #128]	; (8001d30 <HAL_GPIO_Init+0x2d0>)
 8001cb0:	68da      	ldr	r2, [r3, #12]
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	491e      	ldr	r1, [pc, #120]	; (8001d30 <HAL_GPIO_Init+0x2d0>)
 8001cb8:	4013      	ands	r3, r2
 8001cba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d006      	beq.n	8001cd6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cc8:	4b19      	ldr	r3, [pc, #100]	; (8001d30 <HAL_GPIO_Init+0x2d0>)
 8001cca:	685a      	ldr	r2, [r3, #4]
 8001ccc:	4918      	ldr	r1, [pc, #96]	; (8001d30 <HAL_GPIO_Init+0x2d0>)
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	604b      	str	r3, [r1, #4]
 8001cd4:	e006      	b.n	8001ce4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cd6:	4b16      	ldr	r3, [pc, #88]	; (8001d30 <HAL_GPIO_Init+0x2d0>)
 8001cd8:	685a      	ldr	r2, [r3, #4]
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	4914      	ldr	r1, [pc, #80]	; (8001d30 <HAL_GPIO_Init+0x2d0>)
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d021      	beq.n	8001d34 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cf0:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <HAL_GPIO_Init+0x2d0>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	490e      	ldr	r1, [pc, #56]	; (8001d30 <HAL_GPIO_Init+0x2d0>)
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	600b      	str	r3, [r1, #0]
 8001cfc:	e021      	b.n	8001d42 <HAL_GPIO_Init+0x2e2>
 8001cfe:	bf00      	nop
 8001d00:	10320000 	.word	0x10320000
 8001d04:	10310000 	.word	0x10310000
 8001d08:	10220000 	.word	0x10220000
 8001d0c:	10210000 	.word	0x10210000
 8001d10:	10120000 	.word	0x10120000
 8001d14:	10110000 	.word	0x10110000
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	40010000 	.word	0x40010000
 8001d20:	40010800 	.word	0x40010800
 8001d24:	40010c00 	.word	0x40010c00
 8001d28:	40011000 	.word	0x40011000
 8001d2c:	40011400 	.word	0x40011400
 8001d30:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d34:	4b0b      	ldr	r3, [pc, #44]	; (8001d64 <HAL_GPIO_Init+0x304>)
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	4909      	ldr	r1, [pc, #36]	; (8001d64 <HAL_GPIO_Init+0x304>)
 8001d3e:	4013      	ands	r3, r2
 8001d40:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d44:	3301      	adds	r3, #1
 8001d46:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f47f ae8e 	bne.w	8001a74 <HAL_GPIO_Init+0x14>
  }
}
 8001d58:	bf00      	nop
 8001d5a:	bf00      	nop
 8001d5c:	372c      	adds	r7, #44	; 0x2c
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr
 8001d64:	40010400 	.word	0x40010400

08001d68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	460b      	mov	r3, r1
 8001d72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689a      	ldr	r2, [r3, #8]
 8001d78:	887b      	ldrh	r3, [r7, #2]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d002      	beq.n	8001d86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d80:	2301      	movs	r3, #1
 8001d82:	73fb      	strb	r3, [r7, #15]
 8001d84:	e001      	b.n	8001d8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d86:	2300      	movs	r3, #0
 8001d88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3714      	adds	r7, #20
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bc80      	pop	{r7}
 8001d94:	4770      	bx	lr

08001d96 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
 8001d9e:	460b      	mov	r3, r1
 8001da0:	807b      	strh	r3, [r7, #2]
 8001da2:	4613      	mov	r3, r2
 8001da4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001da6:	787b      	ldrb	r3, [r7, #1]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d003      	beq.n	8001db4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dac:	887a      	ldrh	r2, [r7, #2]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001db2:	e003      	b.n	8001dbc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001db4:	887b      	ldrh	r3, [r7, #2]
 8001db6:	041a      	lsls	r2, r3, #16
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	611a      	str	r2, [r3, #16]
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bc80      	pop	{r7}
 8001dc4:	4770      	bx	lr

08001dc6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b085      	sub	sp, #20
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
 8001dce:	460b      	mov	r3, r1
 8001dd0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001dd8:	887a      	ldrh	r2, [r7, #2]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	041a      	lsls	r2, r3, #16
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	43d9      	mvns	r1, r3
 8001de4:	887b      	ldrh	r3, [r7, #2]
 8001de6:	400b      	ands	r3, r1
 8001de8:	431a      	orrs	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	611a      	str	r2, [r3, #16]
}
 8001dee:	bf00      	nop
 8001df0:	3714      	adds	r7, #20
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr

08001df8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e272      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f000 8087 	beq.w	8001f26 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e18:	4b92      	ldr	r3, [pc, #584]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f003 030c 	and.w	r3, r3, #12
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	d00c      	beq.n	8001e3e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e24:	4b8f      	ldr	r3, [pc, #572]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f003 030c 	and.w	r3, r3, #12
 8001e2c:	2b08      	cmp	r3, #8
 8001e2e:	d112      	bne.n	8001e56 <HAL_RCC_OscConfig+0x5e>
 8001e30:	4b8c      	ldr	r3, [pc, #560]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e3c:	d10b      	bne.n	8001e56 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e3e:	4b89      	ldr	r3, [pc, #548]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d06c      	beq.n	8001f24 <HAL_RCC_OscConfig+0x12c>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d168      	bne.n	8001f24 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e24c      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e5e:	d106      	bne.n	8001e6e <HAL_RCC_OscConfig+0x76>
 8001e60:	4b80      	ldr	r3, [pc, #512]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a7f      	ldr	r2, [pc, #508]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e6a:	6013      	str	r3, [r2, #0]
 8001e6c:	e02e      	b.n	8001ecc <HAL_RCC_OscConfig+0xd4>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d10c      	bne.n	8001e90 <HAL_RCC_OscConfig+0x98>
 8001e76:	4b7b      	ldr	r3, [pc, #492]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a7a      	ldr	r2, [pc, #488]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e80:	6013      	str	r3, [r2, #0]
 8001e82:	4b78      	ldr	r3, [pc, #480]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a77      	ldr	r2, [pc, #476]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e8c:	6013      	str	r3, [r2, #0]
 8001e8e:	e01d      	b.n	8001ecc <HAL_RCC_OscConfig+0xd4>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e98:	d10c      	bne.n	8001eb4 <HAL_RCC_OscConfig+0xbc>
 8001e9a:	4b72      	ldr	r3, [pc, #456]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a71      	ldr	r2, [pc, #452]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ea4:	6013      	str	r3, [r2, #0]
 8001ea6:	4b6f      	ldr	r3, [pc, #444]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a6e      	ldr	r2, [pc, #440]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb0:	6013      	str	r3, [r2, #0]
 8001eb2:	e00b      	b.n	8001ecc <HAL_RCC_OscConfig+0xd4>
 8001eb4:	4b6b      	ldr	r3, [pc, #428]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a6a      	ldr	r2, [pc, #424]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001eba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ebe:	6013      	str	r3, [r2, #0]
 8001ec0:	4b68      	ldr	r3, [pc, #416]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a67      	ldr	r2, [pc, #412]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001ec6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d013      	beq.n	8001efc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed4:	f7ff fbd6 	bl	8001684 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001edc:	f7ff fbd2 	bl	8001684 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b64      	cmp	r3, #100	; 0x64
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e200      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eee:	4b5d      	ldr	r3, [pc, #372]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d0f0      	beq.n	8001edc <HAL_RCC_OscConfig+0xe4>
 8001efa:	e014      	b.n	8001f26 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efc:	f7ff fbc2 	bl	8001684 <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f04:	f7ff fbbe 	bl	8001684 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b64      	cmp	r3, #100	; 0x64
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e1ec      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f16:	4b53      	ldr	r3, [pc, #332]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f0      	bne.n	8001f04 <HAL_RCC_OscConfig+0x10c>
 8001f22:	e000      	b.n	8001f26 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d063      	beq.n	8001ffa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f32:	4b4c      	ldr	r3, [pc, #304]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f003 030c 	and.w	r3, r3, #12
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00b      	beq.n	8001f56 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f3e:	4b49      	ldr	r3, [pc, #292]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f003 030c 	and.w	r3, r3, #12
 8001f46:	2b08      	cmp	r3, #8
 8001f48:	d11c      	bne.n	8001f84 <HAL_RCC_OscConfig+0x18c>
 8001f4a:	4b46      	ldr	r3, [pc, #280]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d116      	bne.n	8001f84 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f56:	4b43      	ldr	r3, [pc, #268]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d005      	beq.n	8001f6e <HAL_RCC_OscConfig+0x176>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d001      	beq.n	8001f6e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e1c0      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f6e:	4b3d      	ldr	r3, [pc, #244]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	4939      	ldr	r1, [pc, #228]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f82:	e03a      	b.n	8001ffa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d020      	beq.n	8001fce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f8c:	4b36      	ldr	r3, [pc, #216]	; (8002068 <HAL_RCC_OscConfig+0x270>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f92:	f7ff fb77 	bl	8001684 <HAL_GetTick>
 8001f96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f98:	e008      	b.n	8001fac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f9a:	f7ff fb73 	bl	8001684 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e1a1      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fac:	4b2d      	ldr	r3, [pc, #180]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d0f0      	beq.n	8001f9a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb8:	4b2a      	ldr	r3, [pc, #168]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	4927      	ldr	r1, [pc, #156]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	600b      	str	r3, [r1, #0]
 8001fcc:	e015      	b.n	8001ffa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fce:	4b26      	ldr	r3, [pc, #152]	; (8002068 <HAL_RCC_OscConfig+0x270>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd4:	f7ff fb56 	bl	8001684 <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fdc:	f7ff fb52 	bl	8001684 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e180      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fee:	4b1d      	ldr	r3, [pc, #116]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1f0      	bne.n	8001fdc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0308 	and.w	r3, r3, #8
 8002002:	2b00      	cmp	r3, #0
 8002004:	d03a      	beq.n	800207c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d019      	beq.n	8002042 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800200e:	4b17      	ldr	r3, [pc, #92]	; (800206c <HAL_RCC_OscConfig+0x274>)
 8002010:	2201      	movs	r2, #1
 8002012:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002014:	f7ff fb36 	bl	8001684 <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800201c:	f7ff fb32 	bl	8001684 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e160      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800202e:	4b0d      	ldr	r3, [pc, #52]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8002030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d0f0      	beq.n	800201c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800203a:	2001      	movs	r0, #1
 800203c:	f000 face 	bl	80025dc <RCC_Delay>
 8002040:	e01c      	b.n	800207c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002042:	4b0a      	ldr	r3, [pc, #40]	; (800206c <HAL_RCC_OscConfig+0x274>)
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002048:	f7ff fb1c 	bl	8001684 <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800204e:	e00f      	b.n	8002070 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002050:	f7ff fb18 	bl	8001684 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d908      	bls.n	8002070 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e146      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
 8002062:	bf00      	nop
 8002064:	40021000 	.word	0x40021000
 8002068:	42420000 	.word	0x42420000
 800206c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002070:	4b92      	ldr	r3, [pc, #584]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1e9      	bne.n	8002050 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	2b00      	cmp	r3, #0
 8002086:	f000 80a6 	beq.w	80021d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800208a:	2300      	movs	r3, #0
 800208c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800208e:	4b8b      	ldr	r3, [pc, #556]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d10d      	bne.n	80020b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800209a:	4b88      	ldr	r3, [pc, #544]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	4a87      	ldr	r2, [pc, #540]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 80020a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a4:	61d3      	str	r3, [r2, #28]
 80020a6:	4b85      	ldr	r3, [pc, #532]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ae:	60bb      	str	r3, [r7, #8]
 80020b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020b2:	2301      	movs	r3, #1
 80020b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b6:	4b82      	ldr	r3, [pc, #520]	; (80022c0 <HAL_RCC_OscConfig+0x4c8>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d118      	bne.n	80020f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020c2:	4b7f      	ldr	r3, [pc, #508]	; (80022c0 <HAL_RCC_OscConfig+0x4c8>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a7e      	ldr	r2, [pc, #504]	; (80022c0 <HAL_RCC_OscConfig+0x4c8>)
 80020c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ce:	f7ff fad9 	bl	8001684 <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d4:	e008      	b.n	80020e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020d6:	f7ff fad5 	bl	8001684 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b64      	cmp	r3, #100	; 0x64
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e103      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e8:	4b75      	ldr	r3, [pc, #468]	; (80022c0 <HAL_RCC_OscConfig+0x4c8>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d0f0      	beq.n	80020d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d106      	bne.n	800210a <HAL_RCC_OscConfig+0x312>
 80020fc:	4b6f      	ldr	r3, [pc, #444]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	4a6e      	ldr	r2, [pc, #440]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002102:	f043 0301 	orr.w	r3, r3, #1
 8002106:	6213      	str	r3, [r2, #32]
 8002108:	e02d      	b.n	8002166 <HAL_RCC_OscConfig+0x36e>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d10c      	bne.n	800212c <HAL_RCC_OscConfig+0x334>
 8002112:	4b6a      	ldr	r3, [pc, #424]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002114:	6a1b      	ldr	r3, [r3, #32]
 8002116:	4a69      	ldr	r2, [pc, #420]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002118:	f023 0301 	bic.w	r3, r3, #1
 800211c:	6213      	str	r3, [r2, #32]
 800211e:	4b67      	ldr	r3, [pc, #412]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002120:	6a1b      	ldr	r3, [r3, #32]
 8002122:	4a66      	ldr	r2, [pc, #408]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002124:	f023 0304 	bic.w	r3, r3, #4
 8002128:	6213      	str	r3, [r2, #32]
 800212a:	e01c      	b.n	8002166 <HAL_RCC_OscConfig+0x36e>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	2b05      	cmp	r3, #5
 8002132:	d10c      	bne.n	800214e <HAL_RCC_OscConfig+0x356>
 8002134:	4b61      	ldr	r3, [pc, #388]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002136:	6a1b      	ldr	r3, [r3, #32]
 8002138:	4a60      	ldr	r2, [pc, #384]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 800213a:	f043 0304 	orr.w	r3, r3, #4
 800213e:	6213      	str	r3, [r2, #32]
 8002140:	4b5e      	ldr	r3, [pc, #376]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	4a5d      	ldr	r2, [pc, #372]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002146:	f043 0301 	orr.w	r3, r3, #1
 800214a:	6213      	str	r3, [r2, #32]
 800214c:	e00b      	b.n	8002166 <HAL_RCC_OscConfig+0x36e>
 800214e:	4b5b      	ldr	r3, [pc, #364]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002150:	6a1b      	ldr	r3, [r3, #32]
 8002152:	4a5a      	ldr	r2, [pc, #360]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002154:	f023 0301 	bic.w	r3, r3, #1
 8002158:	6213      	str	r3, [r2, #32]
 800215a:	4b58      	ldr	r3, [pc, #352]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 800215c:	6a1b      	ldr	r3, [r3, #32]
 800215e:	4a57      	ldr	r2, [pc, #348]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002160:	f023 0304 	bic.w	r3, r3, #4
 8002164:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d015      	beq.n	800219a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800216e:	f7ff fa89 	bl	8001684 <HAL_GetTick>
 8002172:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002174:	e00a      	b.n	800218c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002176:	f7ff fa85 	bl	8001684 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	f241 3288 	movw	r2, #5000	; 0x1388
 8002184:	4293      	cmp	r3, r2
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e0b1      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800218c:	4b4b      	ldr	r3, [pc, #300]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d0ee      	beq.n	8002176 <HAL_RCC_OscConfig+0x37e>
 8002198:	e014      	b.n	80021c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800219a:	f7ff fa73 	bl	8001684 <HAL_GetTick>
 800219e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021a0:	e00a      	b.n	80021b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021a2:	f7ff fa6f 	bl	8001684 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e09b      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b8:	4b40      	ldr	r3, [pc, #256]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 80021ba:	6a1b      	ldr	r3, [r3, #32]
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1ee      	bne.n	80021a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021c4:	7dfb      	ldrb	r3, [r7, #23]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d105      	bne.n	80021d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ca:	4b3c      	ldr	r3, [pc, #240]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	4a3b      	ldr	r2, [pc, #236]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 80021d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f000 8087 	beq.w	80022ee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021e0:	4b36      	ldr	r3, [pc, #216]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 030c 	and.w	r3, r3, #12
 80021e8:	2b08      	cmp	r3, #8
 80021ea:	d061      	beq.n	80022b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	69db      	ldr	r3, [r3, #28]
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d146      	bne.n	8002282 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f4:	4b33      	ldr	r3, [pc, #204]	; (80022c4 <HAL_RCC_OscConfig+0x4cc>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fa:	f7ff fa43 	bl	8001684 <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002200:	e008      	b.n	8002214 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002202:	f7ff fa3f 	bl	8001684 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e06d      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002214:	4b29      	ldr	r3, [pc, #164]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1f0      	bne.n	8002202 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002228:	d108      	bne.n	800223c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800222a:	4b24      	ldr	r3, [pc, #144]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	4921      	ldr	r1, [pc, #132]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002238:	4313      	orrs	r3, r2
 800223a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800223c:	4b1f      	ldr	r3, [pc, #124]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a19      	ldr	r1, [r3, #32]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224c:	430b      	orrs	r3, r1
 800224e:	491b      	ldr	r1, [pc, #108]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002250:	4313      	orrs	r3, r2
 8002252:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002254:	4b1b      	ldr	r3, [pc, #108]	; (80022c4 <HAL_RCC_OscConfig+0x4cc>)
 8002256:	2201      	movs	r2, #1
 8002258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225a:	f7ff fa13 	bl	8001684 <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002260:	e008      	b.n	8002274 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002262:	f7ff fa0f 	bl	8001684 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e03d      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002274:	4b11      	ldr	r3, [pc, #68]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d0f0      	beq.n	8002262 <HAL_RCC_OscConfig+0x46a>
 8002280:	e035      	b.n	80022ee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002282:	4b10      	ldr	r3, [pc, #64]	; (80022c4 <HAL_RCC_OscConfig+0x4cc>)
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002288:	f7ff f9fc 	bl	8001684 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002290:	f7ff f9f8 	bl	8001684 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e026      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022a2:	4b06      	ldr	r3, [pc, #24]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f0      	bne.n	8002290 <HAL_RCC_OscConfig+0x498>
 80022ae:	e01e      	b.n	80022ee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	69db      	ldr	r3, [r3, #28]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d107      	bne.n	80022c8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e019      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
 80022bc:	40021000 	.word	0x40021000
 80022c0:	40007000 	.word	0x40007000
 80022c4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022c8:	4b0b      	ldr	r3, [pc, #44]	; (80022f8 <HAL_RCC_OscConfig+0x500>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d106      	bne.n	80022ea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d001      	beq.n	80022ee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e000      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3718      	adds	r7, #24
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40021000 	.word	0x40021000

080022fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e0d0      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002310:	4b6a      	ldr	r3, [pc, #424]	; (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	429a      	cmp	r2, r3
 800231c:	d910      	bls.n	8002340 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231e:	4b67      	ldr	r3, [pc, #412]	; (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f023 0207 	bic.w	r2, r3, #7
 8002326:	4965      	ldr	r1, [pc, #404]	; (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	4313      	orrs	r3, r2
 800232c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800232e:	4b63      	ldr	r3, [pc, #396]	; (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	429a      	cmp	r2, r3
 800233a:	d001      	beq.n	8002340 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e0b8      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d020      	beq.n	800238e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0304 	and.w	r3, r3, #4
 8002354:	2b00      	cmp	r3, #0
 8002356:	d005      	beq.n	8002364 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002358:	4b59      	ldr	r3, [pc, #356]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	4a58      	ldr	r2, [pc, #352]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 800235e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002362:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0308 	and.w	r3, r3, #8
 800236c:	2b00      	cmp	r3, #0
 800236e:	d005      	beq.n	800237c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002370:	4b53      	ldr	r3, [pc, #332]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	4a52      	ldr	r2, [pc, #328]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002376:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800237a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800237c:	4b50      	ldr	r3, [pc, #320]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	494d      	ldr	r1, [pc, #308]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 800238a:	4313      	orrs	r3, r2
 800238c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d040      	beq.n	800241c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d107      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a2:	4b47      	ldr	r3, [pc, #284]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d115      	bne.n	80023da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e07f      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d107      	bne.n	80023ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ba:	4b41      	ldr	r3, [pc, #260]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d109      	bne.n	80023da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e073      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ca:	4b3d      	ldr	r3, [pc, #244]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e06b      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023da:	4b39      	ldr	r3, [pc, #228]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f023 0203 	bic.w	r2, r3, #3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	4936      	ldr	r1, [pc, #216]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023ec:	f7ff f94a 	bl	8001684 <HAL_GetTick>
 80023f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023f2:	e00a      	b.n	800240a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023f4:	f7ff f946 	bl	8001684 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002402:	4293      	cmp	r3, r2
 8002404:	d901      	bls.n	800240a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e053      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240a:	4b2d      	ldr	r3, [pc, #180]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f003 020c 	and.w	r2, r3, #12
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	429a      	cmp	r2, r3
 800241a:	d1eb      	bne.n	80023f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800241c:	4b27      	ldr	r3, [pc, #156]	; (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	429a      	cmp	r2, r3
 8002428:	d210      	bcs.n	800244c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800242a:	4b24      	ldr	r3, [pc, #144]	; (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f023 0207 	bic.w	r2, r3, #7
 8002432:	4922      	ldr	r1, [pc, #136]	; (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	4313      	orrs	r3, r2
 8002438:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800243a:	4b20      	ldr	r3, [pc, #128]	; (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0307 	and.w	r3, r3, #7
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	429a      	cmp	r2, r3
 8002446:	d001      	beq.n	800244c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e032      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0304 	and.w	r3, r3, #4
 8002454:	2b00      	cmp	r3, #0
 8002456:	d008      	beq.n	800246a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002458:	4b19      	ldr	r3, [pc, #100]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	4916      	ldr	r1, [pc, #88]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002466:	4313      	orrs	r3, r2
 8002468:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0308 	and.w	r3, r3, #8
 8002472:	2b00      	cmp	r3, #0
 8002474:	d009      	beq.n	800248a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002476:	4b12      	ldr	r3, [pc, #72]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	490e      	ldr	r1, [pc, #56]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002486:	4313      	orrs	r3, r2
 8002488:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800248a:	f000 f821 	bl	80024d0 <HAL_RCC_GetSysClockFreq>
 800248e:	4602      	mov	r2, r0
 8002490:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	091b      	lsrs	r3, r3, #4
 8002496:	f003 030f 	and.w	r3, r3, #15
 800249a:	490a      	ldr	r1, [pc, #40]	; (80024c4 <HAL_RCC_ClockConfig+0x1c8>)
 800249c:	5ccb      	ldrb	r3, [r1, r3]
 800249e:	fa22 f303 	lsr.w	r3, r2, r3
 80024a2:	4a09      	ldr	r2, [pc, #36]	; (80024c8 <HAL_RCC_ClockConfig+0x1cc>)
 80024a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024a6:	4b09      	ldr	r3, [pc, #36]	; (80024cc <HAL_RCC_ClockConfig+0x1d0>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff f8a8 	bl	8001600 <HAL_InitTick>

  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40022000 	.word	0x40022000
 80024c0:	40021000 	.word	0x40021000
 80024c4:	08003dfc 	.word	0x08003dfc
 80024c8:	20000004 	.word	0x20000004
 80024cc:	20000008 	.word	0x20000008

080024d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b087      	sub	sp, #28
 80024d4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024d6:	2300      	movs	r3, #0
 80024d8:	60fb      	str	r3, [r7, #12]
 80024da:	2300      	movs	r3, #0
 80024dc:	60bb      	str	r3, [r7, #8]
 80024de:	2300      	movs	r3, #0
 80024e0:	617b      	str	r3, [r7, #20]
 80024e2:	2300      	movs	r3, #0
 80024e4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024e6:	2300      	movs	r3, #0
 80024e8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024ea:	4b1e      	ldr	r3, [pc, #120]	; (8002564 <HAL_RCC_GetSysClockFreq+0x94>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f003 030c 	and.w	r3, r3, #12
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	d002      	beq.n	8002500 <HAL_RCC_GetSysClockFreq+0x30>
 80024fa:	2b08      	cmp	r3, #8
 80024fc:	d003      	beq.n	8002506 <HAL_RCC_GetSysClockFreq+0x36>
 80024fe:	e027      	b.n	8002550 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002500:	4b19      	ldr	r3, [pc, #100]	; (8002568 <HAL_RCC_GetSysClockFreq+0x98>)
 8002502:	613b      	str	r3, [r7, #16]
      break;
 8002504:	e027      	b.n	8002556 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	0c9b      	lsrs	r3, r3, #18
 800250a:	f003 030f 	and.w	r3, r3, #15
 800250e:	4a17      	ldr	r2, [pc, #92]	; (800256c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002510:	5cd3      	ldrb	r3, [r2, r3]
 8002512:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d010      	beq.n	8002540 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800251e:	4b11      	ldr	r3, [pc, #68]	; (8002564 <HAL_RCC_GetSysClockFreq+0x94>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	0c5b      	lsrs	r3, r3, #17
 8002524:	f003 0301 	and.w	r3, r3, #1
 8002528:	4a11      	ldr	r2, [pc, #68]	; (8002570 <HAL_RCC_GetSysClockFreq+0xa0>)
 800252a:	5cd3      	ldrb	r3, [r2, r3]
 800252c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a0d      	ldr	r2, [pc, #52]	; (8002568 <HAL_RCC_GetSysClockFreq+0x98>)
 8002532:	fb03 f202 	mul.w	r2, r3, r2
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	fbb2 f3f3 	udiv	r3, r2, r3
 800253c:	617b      	str	r3, [r7, #20]
 800253e:	e004      	b.n	800254a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a0c      	ldr	r2, [pc, #48]	; (8002574 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002544:	fb02 f303 	mul.w	r3, r2, r3
 8002548:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	613b      	str	r3, [r7, #16]
      break;
 800254e:	e002      	b.n	8002556 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002550:	4b05      	ldr	r3, [pc, #20]	; (8002568 <HAL_RCC_GetSysClockFreq+0x98>)
 8002552:	613b      	str	r3, [r7, #16]
      break;
 8002554:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002556:	693b      	ldr	r3, [r7, #16]
}
 8002558:	4618      	mov	r0, r3
 800255a:	371c      	adds	r7, #28
 800255c:	46bd      	mov	sp, r7
 800255e:	bc80      	pop	{r7}
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	40021000 	.word	0x40021000
 8002568:	007a1200 	.word	0x007a1200
 800256c:	08003e14 	.word	0x08003e14
 8002570:	08003e24 	.word	0x08003e24
 8002574:	003d0900 	.word	0x003d0900

08002578 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800257c:	4b02      	ldr	r3, [pc, #8]	; (8002588 <HAL_RCC_GetHCLKFreq+0x10>)
 800257e:	681b      	ldr	r3, [r3, #0]
}
 8002580:	4618      	mov	r0, r3
 8002582:	46bd      	mov	sp, r7
 8002584:	bc80      	pop	{r7}
 8002586:	4770      	bx	lr
 8002588:	20000004 	.word	0x20000004

0800258c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002590:	f7ff fff2 	bl	8002578 <HAL_RCC_GetHCLKFreq>
 8002594:	4602      	mov	r2, r0
 8002596:	4b05      	ldr	r3, [pc, #20]	; (80025ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	0a1b      	lsrs	r3, r3, #8
 800259c:	f003 0307 	and.w	r3, r3, #7
 80025a0:	4903      	ldr	r1, [pc, #12]	; (80025b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025a2:	5ccb      	ldrb	r3, [r1, r3]
 80025a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	40021000 	.word	0x40021000
 80025b0:	08003e0c 	.word	0x08003e0c

080025b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025b8:	f7ff ffde 	bl	8002578 <HAL_RCC_GetHCLKFreq>
 80025bc:	4602      	mov	r2, r0
 80025be:	4b05      	ldr	r3, [pc, #20]	; (80025d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	0adb      	lsrs	r3, r3, #11
 80025c4:	f003 0307 	and.w	r3, r3, #7
 80025c8:	4903      	ldr	r1, [pc, #12]	; (80025d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025ca:	5ccb      	ldrb	r3, [r1, r3]
 80025cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	40021000 	.word	0x40021000
 80025d8:	08003e0c 	.word	0x08003e0c

080025dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025e4:	4b0a      	ldr	r3, [pc, #40]	; (8002610 <RCC_Delay+0x34>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a0a      	ldr	r2, [pc, #40]	; (8002614 <RCC_Delay+0x38>)
 80025ea:	fba2 2303 	umull	r2, r3, r2, r3
 80025ee:	0a5b      	lsrs	r3, r3, #9
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	fb02 f303 	mul.w	r3, r2, r3
 80025f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025f8:	bf00      	nop
  }
  while (Delay --);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	1e5a      	subs	r2, r3, #1
 80025fe:	60fa      	str	r2, [r7, #12]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1f9      	bne.n	80025f8 <RCC_Delay+0x1c>
}
 8002604:	bf00      	nop
 8002606:	bf00      	nop
 8002608:	3714      	adds	r7, #20
 800260a:	46bd      	mov	sp, r7
 800260c:	bc80      	pop	{r7}
 800260e:	4770      	bx	lr
 8002610:	20000004 	.word	0x20000004
 8002614:	10624dd3 	.word	0x10624dd3

08002618 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e041      	b.n	80026ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d106      	bne.n	8002644 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7fe fec4 	bl	80013cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2202      	movs	r2, #2
 8002648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	3304      	adds	r3, #4
 8002654:	4619      	mov	r1, r3
 8002656:	4610      	mov	r0, r2
 8002658:	f000 faa2 	bl	8002ba0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
	...

080026b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d001      	beq.n	80026d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e03a      	b.n	8002746 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2202      	movs	r2, #2
 80026d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68da      	ldr	r2, [r3, #12]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f042 0201 	orr.w	r2, r2, #1
 80026e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a18      	ldr	r2, [pc, #96]	; (8002750 <HAL_TIM_Base_Start_IT+0x98>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d00e      	beq.n	8002710 <HAL_TIM_Base_Start_IT+0x58>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026fa:	d009      	beq.n	8002710 <HAL_TIM_Base_Start_IT+0x58>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a14      	ldr	r2, [pc, #80]	; (8002754 <HAL_TIM_Base_Start_IT+0x9c>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d004      	beq.n	8002710 <HAL_TIM_Base_Start_IT+0x58>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a13      	ldr	r2, [pc, #76]	; (8002758 <HAL_TIM_Base_Start_IT+0xa0>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d111      	bne.n	8002734 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2b06      	cmp	r3, #6
 8002720:	d010      	beq.n	8002744 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f042 0201 	orr.w	r2, r2, #1
 8002730:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002732:	e007      	b.n	8002744 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f042 0201 	orr.w	r2, r2, #1
 8002742:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3714      	adds	r7, #20
 800274a:	46bd      	mov	sp, r7
 800274c:	bc80      	pop	{r7}
 800274e:	4770      	bx	lr
 8002750:	40012c00 	.word	0x40012c00
 8002754:	40000400 	.word	0x40000400
 8002758:	40000800 	.word	0x40000800

0800275c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68da      	ldr	r2, [r3, #12]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 0201 	bic.w	r2, r2, #1
 8002772:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6a1a      	ldr	r2, [r3, #32]
 800277a:	f241 1311 	movw	r3, #4369	; 0x1111
 800277e:	4013      	ands	r3, r2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d10f      	bne.n	80027a4 <HAL_TIM_Base_Stop_IT+0x48>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6a1a      	ldr	r2, [r3, #32]
 800278a:	f240 4344 	movw	r3, #1092	; 0x444
 800278e:	4013      	ands	r3, r2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d107      	bne.n	80027a4 <HAL_TIM_Base_Stop_IT+0x48>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f022 0201 	bic.w	r2, r2, #1
 80027a2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc80      	pop	{r7}
 80027b6:	4770      	bx	lr

080027b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d122      	bne.n	8002814 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d11b      	bne.n	8002814 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f06f 0202 	mvn.w	r2, #2
 80027e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2201      	movs	r2, #1
 80027ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	f003 0303 	and.w	r3, r3, #3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f9b4 	bl	8002b68 <HAL_TIM_IC_CaptureCallback>
 8002800:	e005      	b.n	800280e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 f9a7 	bl	8002b56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 f9b6 	bl	8002b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	f003 0304 	and.w	r3, r3, #4
 800281e:	2b04      	cmp	r3, #4
 8002820:	d122      	bne.n	8002868 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	2b04      	cmp	r3, #4
 800282e:	d11b      	bne.n	8002868 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f06f 0204 	mvn.w	r2, #4
 8002838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2202      	movs	r2, #2
 800283e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800284a:	2b00      	cmp	r3, #0
 800284c:	d003      	beq.n	8002856 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 f98a 	bl	8002b68 <HAL_TIM_IC_CaptureCallback>
 8002854:	e005      	b.n	8002862 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f97d 	bl	8002b56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 f98c 	bl	8002b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	f003 0308 	and.w	r3, r3, #8
 8002872:	2b08      	cmp	r3, #8
 8002874:	d122      	bne.n	80028bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f003 0308 	and.w	r3, r3, #8
 8002880:	2b08      	cmp	r3, #8
 8002882:	d11b      	bne.n	80028bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f06f 0208 	mvn.w	r2, #8
 800288c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2204      	movs	r2, #4
 8002892:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	f003 0303 	and.w	r3, r3, #3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 f960 	bl	8002b68 <HAL_TIM_IC_CaptureCallback>
 80028a8:	e005      	b.n	80028b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 f953 	bl	8002b56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f000 f962 	bl	8002b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	f003 0310 	and.w	r3, r3, #16
 80028c6:	2b10      	cmp	r3, #16
 80028c8:	d122      	bne.n	8002910 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	f003 0310 	and.w	r3, r3, #16
 80028d4:	2b10      	cmp	r3, #16
 80028d6:	d11b      	bne.n	8002910 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f06f 0210 	mvn.w	r2, #16
 80028e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2208      	movs	r2, #8
 80028e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	69db      	ldr	r3, [r3, #28]
 80028ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d003      	beq.n	80028fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 f936 	bl	8002b68 <HAL_TIM_IC_CaptureCallback>
 80028fc:	e005      	b.n	800290a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 f929 	bl	8002b56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 f938 	bl	8002b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	2b01      	cmp	r3, #1
 800291c:	d10e      	bne.n	800293c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	2b01      	cmp	r3, #1
 800292a:	d107      	bne.n	800293c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f06f 0201 	mvn.w	r2, #1
 8002934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7fe fcec 	bl	8001314 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002946:	2b80      	cmp	r3, #128	; 0x80
 8002948:	d10e      	bne.n	8002968 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002954:	2b80      	cmp	r3, #128	; 0x80
 8002956:	d107      	bne.n	8002968 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f000 fa7b 	bl	8002e5e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002972:	2b40      	cmp	r3, #64	; 0x40
 8002974:	d10e      	bne.n	8002994 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002980:	2b40      	cmp	r3, #64	; 0x40
 8002982:	d107      	bne.n	8002994 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800298c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 f8fc 	bl	8002b8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	f003 0320 	and.w	r3, r3, #32
 800299e:	2b20      	cmp	r3, #32
 80029a0:	d10e      	bne.n	80029c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	f003 0320 	and.w	r3, r3, #32
 80029ac:	2b20      	cmp	r3, #32
 80029ae:	d107      	bne.n	80029c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f06f 0220 	mvn.w	r2, #32
 80029b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 fa46 	bl	8002e4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029c0:	bf00      	nop
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029d2:	2300      	movs	r3, #0
 80029d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d101      	bne.n	80029e4 <HAL_TIM_ConfigClockSource+0x1c>
 80029e0:	2302      	movs	r3, #2
 80029e2:	e0b4      	b.n	8002b4e <HAL_TIM_ConfigClockSource+0x186>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2202      	movs	r2, #2
 80029f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68ba      	ldr	r2, [r7, #8]
 8002a12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a1c:	d03e      	beq.n	8002a9c <HAL_TIM_ConfigClockSource+0xd4>
 8002a1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a22:	f200 8087 	bhi.w	8002b34 <HAL_TIM_ConfigClockSource+0x16c>
 8002a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a2a:	f000 8086 	beq.w	8002b3a <HAL_TIM_ConfigClockSource+0x172>
 8002a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a32:	d87f      	bhi.n	8002b34 <HAL_TIM_ConfigClockSource+0x16c>
 8002a34:	2b70      	cmp	r3, #112	; 0x70
 8002a36:	d01a      	beq.n	8002a6e <HAL_TIM_ConfigClockSource+0xa6>
 8002a38:	2b70      	cmp	r3, #112	; 0x70
 8002a3a:	d87b      	bhi.n	8002b34 <HAL_TIM_ConfigClockSource+0x16c>
 8002a3c:	2b60      	cmp	r3, #96	; 0x60
 8002a3e:	d050      	beq.n	8002ae2 <HAL_TIM_ConfigClockSource+0x11a>
 8002a40:	2b60      	cmp	r3, #96	; 0x60
 8002a42:	d877      	bhi.n	8002b34 <HAL_TIM_ConfigClockSource+0x16c>
 8002a44:	2b50      	cmp	r3, #80	; 0x50
 8002a46:	d03c      	beq.n	8002ac2 <HAL_TIM_ConfigClockSource+0xfa>
 8002a48:	2b50      	cmp	r3, #80	; 0x50
 8002a4a:	d873      	bhi.n	8002b34 <HAL_TIM_ConfigClockSource+0x16c>
 8002a4c:	2b40      	cmp	r3, #64	; 0x40
 8002a4e:	d058      	beq.n	8002b02 <HAL_TIM_ConfigClockSource+0x13a>
 8002a50:	2b40      	cmp	r3, #64	; 0x40
 8002a52:	d86f      	bhi.n	8002b34 <HAL_TIM_ConfigClockSource+0x16c>
 8002a54:	2b30      	cmp	r3, #48	; 0x30
 8002a56:	d064      	beq.n	8002b22 <HAL_TIM_ConfigClockSource+0x15a>
 8002a58:	2b30      	cmp	r3, #48	; 0x30
 8002a5a:	d86b      	bhi.n	8002b34 <HAL_TIM_ConfigClockSource+0x16c>
 8002a5c:	2b20      	cmp	r3, #32
 8002a5e:	d060      	beq.n	8002b22 <HAL_TIM_ConfigClockSource+0x15a>
 8002a60:	2b20      	cmp	r3, #32
 8002a62:	d867      	bhi.n	8002b34 <HAL_TIM_ConfigClockSource+0x16c>
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d05c      	beq.n	8002b22 <HAL_TIM_ConfigClockSource+0x15a>
 8002a68:	2b10      	cmp	r3, #16
 8002a6a:	d05a      	beq.n	8002b22 <HAL_TIM_ConfigClockSource+0x15a>
 8002a6c:	e062      	b.n	8002b34 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a7e:	f000 f968 	bl	8002d52 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68ba      	ldr	r2, [r7, #8]
 8002a98:	609a      	str	r2, [r3, #8]
      break;
 8002a9a:	e04f      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002aac:	f000 f951 	bl	8002d52 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689a      	ldr	r2, [r3, #8]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002abe:	609a      	str	r2, [r3, #8]
      break;
 8002ac0:	e03c      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ace:	461a      	mov	r2, r3
 8002ad0:	f000 f8c8 	bl	8002c64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2150      	movs	r1, #80	; 0x50
 8002ada:	4618      	mov	r0, r3
 8002adc:	f000 f91f 	bl	8002d1e <TIM_ITRx_SetConfig>
      break;
 8002ae0:	e02c      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002aee:	461a      	mov	r2, r3
 8002af0:	f000 f8e6 	bl	8002cc0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2160      	movs	r1, #96	; 0x60
 8002afa:	4618      	mov	r0, r3
 8002afc:	f000 f90f 	bl	8002d1e <TIM_ITRx_SetConfig>
      break;
 8002b00:	e01c      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b0e:	461a      	mov	r2, r3
 8002b10:	f000 f8a8 	bl	8002c64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2140      	movs	r1, #64	; 0x40
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f000 f8ff 	bl	8002d1e <TIM_ITRx_SetConfig>
      break;
 8002b20:	e00c      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	4610      	mov	r0, r2
 8002b2e:	f000 f8f6 	bl	8002d1e <TIM_ITRx_SetConfig>
      break;
 8002b32:	e003      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	73fb      	strb	r3, [r7, #15]
      break;
 8002b38:	e000      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b56:	b480      	push	{r7}
 8002b58:	b083      	sub	sp, #12
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bc80      	pop	{r7}
 8002b66:	4770      	bx	lr

08002b68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bc80      	pop	{r7}
 8002b78:	4770      	bx	lr

08002b7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b083      	sub	sp, #12
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bc80      	pop	{r7}
 8002b8a:	4770      	bx	lr

08002b8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bc80      	pop	{r7}
 8002b9c:	4770      	bx	lr
	...

08002ba0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4a29      	ldr	r2, [pc, #164]	; (8002c58 <TIM_Base_SetConfig+0xb8>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d00b      	beq.n	8002bd0 <TIM_Base_SetConfig+0x30>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bbe:	d007      	beq.n	8002bd0 <TIM_Base_SetConfig+0x30>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a26      	ldr	r2, [pc, #152]	; (8002c5c <TIM_Base_SetConfig+0xbc>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d003      	beq.n	8002bd0 <TIM_Base_SetConfig+0x30>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a25      	ldr	r2, [pc, #148]	; (8002c60 <TIM_Base_SetConfig+0xc0>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d108      	bne.n	8002be2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a1c      	ldr	r2, [pc, #112]	; (8002c58 <TIM_Base_SetConfig+0xb8>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d00b      	beq.n	8002c02 <TIM_Base_SetConfig+0x62>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bf0:	d007      	beq.n	8002c02 <TIM_Base_SetConfig+0x62>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a19      	ldr	r2, [pc, #100]	; (8002c5c <TIM_Base_SetConfig+0xbc>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d003      	beq.n	8002c02 <TIM_Base_SetConfig+0x62>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a18      	ldr	r2, [pc, #96]	; (8002c60 <TIM_Base_SetConfig+0xc0>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d108      	bne.n	8002c14 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a07      	ldr	r2, [pc, #28]	; (8002c58 <TIM_Base_SetConfig+0xb8>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d103      	bne.n	8002c48 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	691a      	ldr	r2, [r3, #16]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	615a      	str	r2, [r3, #20]
}
 8002c4e:	bf00      	nop
 8002c50:	3714      	adds	r7, #20
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr
 8002c58:	40012c00 	.word	0x40012c00
 8002c5c:	40000400 	.word	0x40000400
 8002c60:	40000800 	.word	0x40000800

08002c64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b087      	sub	sp, #28
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	f023 0201 	bic.w	r2, r3, #1
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	011b      	lsls	r3, r3, #4
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	f023 030a 	bic.w	r3, r3, #10
 8002ca0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ca2:	697a      	ldr	r2, [r7, #20]
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	621a      	str	r2, [r3, #32]
}
 8002cb6:	bf00      	nop
 8002cb8:	371c      	adds	r7, #28
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr

08002cc0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b087      	sub	sp, #28
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	f023 0210 	bic.w	r2, r3, #16
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002cea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	031b      	lsls	r3, r3, #12
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002cfc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	011b      	lsls	r3, r3, #4
 8002d02:	697a      	ldr	r2, [r7, #20]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	621a      	str	r2, [r3, #32]
}
 8002d14:	bf00      	nop
 8002d16:	371c      	adds	r7, #28
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc80      	pop	{r7}
 8002d1c:	4770      	bx	lr

08002d1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b085      	sub	sp, #20
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
 8002d26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	f043 0307 	orr.w	r3, r3, #7
 8002d40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	609a      	str	r2, [r3, #8]
}
 8002d48:	bf00      	nop
 8002d4a:	3714      	adds	r7, #20
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bc80      	pop	{r7}
 8002d50:	4770      	bx	lr

08002d52 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b087      	sub	sp, #28
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	60f8      	str	r0, [r7, #12]
 8002d5a:	60b9      	str	r1, [r7, #8]
 8002d5c:	607a      	str	r2, [r7, #4]
 8002d5e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d6c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	021a      	lsls	r2, r3, #8
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	431a      	orrs	r2, r3
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	609a      	str	r2, [r3, #8]
}
 8002d86:	bf00      	nop
 8002d88:	371c      	adds	r7, #28
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bc80      	pop	{r7}
 8002d8e:	4770      	bx	lr

08002d90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d101      	bne.n	8002da8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002da4:	2302      	movs	r3, #2
 8002da6:	e046      	b.n	8002e36 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2202      	movs	r2, #2
 8002db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a16      	ldr	r2, [pc, #88]	; (8002e40 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d00e      	beq.n	8002e0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df4:	d009      	beq.n	8002e0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a12      	ldr	r2, [pc, #72]	; (8002e44 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d004      	beq.n	8002e0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a10      	ldr	r2, [pc, #64]	; (8002e48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d10c      	bne.n	8002e24 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	68ba      	ldr	r2, [r7, #8]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68ba      	ldr	r2, [r7, #8]
 8002e22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3714      	adds	r7, #20
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bc80      	pop	{r7}
 8002e3e:	4770      	bx	lr
 8002e40:	40012c00 	.word	0x40012c00
 8002e44:	40000400 	.word	0x40000400
 8002e48:	40000800 	.word	0x40000800

08002e4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bc80      	pop	{r7}
 8002e5c:	4770      	bx	lr

08002e5e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b083      	sub	sp, #12
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e66:	bf00      	nop
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr

08002e70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e042      	b.n	8002f08 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d106      	bne.n	8002e9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f7fe fad8 	bl	800144c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2224      	movs	r2, #36	; 0x24
 8002ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68da      	ldr	r2, [r3, #12]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002eb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f000 fe5f 	bl	8003b78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	691a      	ldr	r2, [r3, #16]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ec8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	695a      	ldr	r2, [r3, #20]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ed8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68da      	ldr	r2, [r3, #12]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ee8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2220      	movs	r2, #32
 8002efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3708      	adds	r7, #8
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b08a      	sub	sp, #40	; 0x28
 8002f14:	af02      	add	r7, sp, #8
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	603b      	str	r3, [r7, #0]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f20:	2300      	movs	r3, #0
 8002f22:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b20      	cmp	r3, #32
 8002f2e:	d16d      	bne.n	800300c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d002      	beq.n	8002f3c <HAL_UART_Transmit+0x2c>
 8002f36:	88fb      	ldrh	r3, [r7, #6]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d101      	bne.n	8002f40 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e066      	b.n	800300e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2221      	movs	r2, #33	; 0x21
 8002f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f4e:	f7fe fb99 	bl	8001684 <HAL_GetTick>
 8002f52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	88fa      	ldrh	r2, [r7, #6]
 8002f58:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	88fa      	ldrh	r2, [r7, #6]
 8002f5e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f68:	d108      	bne.n	8002f7c <HAL_UART_Transmit+0x6c>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d104      	bne.n	8002f7c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002f72:	2300      	movs	r3, #0
 8002f74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	61bb      	str	r3, [r7, #24]
 8002f7a:	e003      	b.n	8002f84 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f80:	2300      	movs	r3, #0
 8002f82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f84:	e02a      	b.n	8002fdc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	9300      	str	r3, [sp, #0]
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	2180      	movs	r1, #128	; 0x80
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f000 fbaf 	bl	80036f4 <UART_WaitOnFlagUntilTimeout>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e036      	b.n	800300e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10b      	bne.n	8002fbe <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	881b      	ldrh	r3, [r3, #0]
 8002faa:	461a      	mov	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fb4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	3302      	adds	r3, #2
 8002fba:	61bb      	str	r3, [r7, #24]
 8002fbc:	e007      	b.n	8002fce <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	781a      	ldrb	r2, [r3, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	3301      	adds	r3, #1
 8002fcc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1cf      	bne.n	8002f86 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	9300      	str	r3, [sp, #0]
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	2200      	movs	r2, #0
 8002fee:	2140      	movs	r1, #64	; 0x40
 8002ff0:	68f8      	ldr	r0, [r7, #12]
 8002ff2:	f000 fb7f 	bl	80036f4 <UART_WaitOnFlagUntilTimeout>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d001      	beq.n	8003000 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e006      	b.n	800300e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2220      	movs	r2, #32
 8003004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003008:	2300      	movs	r3, #0
 800300a:	e000      	b.n	800300e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800300c:	2302      	movs	r3, #2
  }
}
 800300e:	4618      	mov	r0, r3
 8003010:	3720      	adds	r7, #32
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b08a      	sub	sp, #40	; 0x28
 800301a:	af02      	add	r7, sp, #8
 800301c:	60f8      	str	r0, [r7, #12]
 800301e:	60b9      	str	r1, [r7, #8]
 8003020:	603b      	str	r3, [r7, #0]
 8003022:	4613      	mov	r3, r2
 8003024:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003026:	2300      	movs	r3, #0
 8003028:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b20      	cmp	r3, #32
 8003034:	d17c      	bne.n	8003130 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d002      	beq.n	8003042 <HAL_UART_Receive+0x2c>
 800303c:	88fb      	ldrh	r3, [r7, #6]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e075      	b.n	8003132 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2222      	movs	r2, #34	; 0x22
 8003050:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800305a:	f7fe fb13 	bl	8001684 <HAL_GetTick>
 800305e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	88fa      	ldrh	r2, [r7, #6]
 8003064:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	88fa      	ldrh	r2, [r7, #6]
 800306a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003074:	d108      	bne.n	8003088 <HAL_UART_Receive+0x72>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d104      	bne.n	8003088 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 800307e:	2300      	movs	r3, #0
 8003080:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	61bb      	str	r3, [r7, #24]
 8003086:	e003      	b.n	8003090 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800308c:	2300      	movs	r3, #0
 800308e:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003090:	e043      	b.n	800311a <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	9300      	str	r3, [sp, #0]
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	2200      	movs	r2, #0
 800309a:	2120      	movs	r1, #32
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f000 fb29 	bl	80036f4 <UART_WaitOnFlagUntilTimeout>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d001      	beq.n	80030ac <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e042      	b.n	8003132 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10c      	bne.n	80030cc <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030be:	b29a      	uxth	r2, r3
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	3302      	adds	r3, #2
 80030c8:	61bb      	str	r3, [r7, #24]
 80030ca:	e01f      	b.n	800310c <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030d4:	d007      	beq.n	80030e6 <HAL_UART_Receive+0xd0>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10a      	bne.n	80030f4 <HAL_UART_Receive+0xde>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d106      	bne.n	80030f4 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	701a      	strb	r2, [r3, #0]
 80030f2:	e008      	b.n	8003106 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003100:	b2da      	uxtb	r2, r3
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	3301      	adds	r3, #1
 800310a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003110:	b29b      	uxth	r3, r3
 8003112:	3b01      	subs	r3, #1
 8003114:	b29a      	uxth	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800311e:	b29b      	uxth	r3, r3
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1b6      	bne.n	8003092 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2220      	movs	r2, #32
 8003128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 800312c:	2300      	movs	r3, #0
 800312e:	e000      	b.n	8003132 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003130:	2302      	movs	r3, #2
  }
}
 8003132:	4618      	mov	r0, r3
 8003134:	3720      	adds	r7, #32
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b084      	sub	sp, #16
 800313e:	af00      	add	r7, sp, #0
 8003140:	60f8      	str	r0, [r7, #12]
 8003142:	60b9      	str	r1, [r7, #8]
 8003144:	4613      	mov	r3, r2
 8003146:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800314e:	b2db      	uxtb	r3, r3
 8003150:	2b20      	cmp	r3, #32
 8003152:	d112      	bne.n	800317a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d002      	beq.n	8003160 <HAL_UART_Receive_IT+0x26>
 800315a:	88fb      	ldrh	r3, [r7, #6]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d101      	bne.n	8003164 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e00b      	b.n	800317c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800316a:	88fb      	ldrh	r3, [r7, #6]
 800316c:	461a      	mov	r2, r3
 800316e:	68b9      	ldr	r1, [r7, #8]
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f000 fb2d 	bl	80037d0 <UART_Start_Receive_IT>
 8003176:	4603      	mov	r3, r0
 8003178:	e000      	b.n	800317c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800317a:	2302      	movs	r3, #2
  }
}
 800317c:	4618      	mov	r0, r3
 800317e:	3710      	adds	r7, #16
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b0ba      	sub	sp, #232	; 0xe8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80031aa:	2300      	movs	r3, #0
 80031ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80031b0:	2300      	movs	r3, #0
 80031b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80031b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031ba:	f003 030f 	and.w	r3, r3, #15
 80031be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80031c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10f      	bne.n	80031ea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031ce:	f003 0320 	and.w	r3, r3, #32
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d009      	beq.n	80031ea <HAL_UART_IRQHandler+0x66>
 80031d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031da:	f003 0320 	and.w	r3, r3, #32
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 fc0a 	bl	80039fc <UART_Receive_IT>
      return;
 80031e8:	e25b      	b.n	80036a2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80031ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f000 80de 	beq.w	80033b0 <HAL_UART_IRQHandler+0x22c>
 80031f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d106      	bne.n	800320e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003204:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 80d1 	beq.w	80033b0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800320e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00b      	beq.n	8003232 <HAL_UART_IRQHandler+0xae>
 800321a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800321e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003222:	2b00      	cmp	r3, #0
 8003224:	d005      	beq.n	8003232 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322a:	f043 0201 	orr.w	r2, r3, #1
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003236:	f003 0304 	and.w	r3, r3, #4
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00b      	beq.n	8003256 <HAL_UART_IRQHandler+0xd2>
 800323e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b00      	cmp	r3, #0
 8003248:	d005      	beq.n	8003256 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324e:	f043 0202 	orr.w	r2, r3, #2
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00b      	beq.n	800327a <HAL_UART_IRQHandler+0xf6>
 8003262:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	2b00      	cmp	r3, #0
 800326c:	d005      	beq.n	800327a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003272:	f043 0204 	orr.w	r2, r3, #4
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800327a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800327e:	f003 0308 	and.w	r3, r3, #8
 8003282:	2b00      	cmp	r3, #0
 8003284:	d011      	beq.n	80032aa <HAL_UART_IRQHandler+0x126>
 8003286:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800328a:	f003 0320 	and.w	r3, r3, #32
 800328e:	2b00      	cmp	r3, #0
 8003290:	d105      	bne.n	800329e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003292:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b00      	cmp	r3, #0
 800329c:	d005      	beq.n	80032aa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a2:	f043 0208 	orr.w	r2, r3, #8
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f000 81f2 	beq.w	8003698 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032b8:	f003 0320 	and.w	r3, r3, #32
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d008      	beq.n	80032d2 <HAL_UART_IRQHandler+0x14e>
 80032c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032c4:	f003 0320 	and.w	r3, r3, #32
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d002      	beq.n	80032d2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 fb95 	bl	80039fc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032dc:	2b00      	cmp	r3, #0
 80032de:	bf14      	ite	ne
 80032e0:	2301      	movne	r3, #1
 80032e2:	2300      	moveq	r3, #0
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ee:	f003 0308 	and.w	r3, r3, #8
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d103      	bne.n	80032fe <HAL_UART_IRQHandler+0x17a>
 80032f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d04f      	beq.n	800339e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 fa9f 	bl	8003842 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800330e:	2b00      	cmp	r3, #0
 8003310:	d041      	beq.n	8003396 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	3314      	adds	r3, #20
 8003318:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800331c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003320:	e853 3f00 	ldrex	r3, [r3]
 8003324:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003328:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800332c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003330:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	3314      	adds	r3, #20
 800333a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800333e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003342:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003346:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800334a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800334e:	e841 2300 	strex	r3, r2, [r1]
 8003352:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003356:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1d9      	bne.n	8003312 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003362:	2b00      	cmp	r3, #0
 8003364:	d013      	beq.n	800338e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800336a:	4a7e      	ldr	r2, [pc, #504]	; (8003564 <HAL_UART_IRQHandler+0x3e0>)
 800336c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003372:	4618      	mov	r0, r3
 8003374:	f7fe fafc 	bl	8001970 <HAL_DMA_Abort_IT>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d016      	beq.n	80033ac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003388:	4610      	mov	r0, r2
 800338a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800338c:	e00e      	b.n	80033ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 f99c 	bl	80036cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003394:	e00a      	b.n	80033ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 f998 	bl	80036cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800339c:	e006      	b.n	80033ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 f994 	bl	80036cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80033aa:	e175      	b.n	8003698 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033ac:	bf00      	nop
    return;
 80033ae:	e173      	b.n	8003698 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	f040 814f 	bne.w	8003658 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80033ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033be:	f003 0310 	and.w	r3, r3, #16
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f000 8148 	beq.w	8003658 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80033c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033cc:	f003 0310 	and.w	r3, r3, #16
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f000 8141 	beq.w	8003658 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033d6:	2300      	movs	r3, #0
 80033d8:	60bb      	str	r3, [r7, #8]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	60bb      	str	r3, [r7, #8]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	60bb      	str	r3, [r7, #8]
 80033ea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f000 80b6 	beq.w	8003568 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003408:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800340c:	2b00      	cmp	r3, #0
 800340e:	f000 8145 	beq.w	800369c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003416:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800341a:	429a      	cmp	r2, r3
 800341c:	f080 813e 	bcs.w	800369c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003426:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	2b20      	cmp	r3, #32
 8003430:	f000 8088 	beq.w	8003544 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	330c      	adds	r3, #12
 800343a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800343e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003442:	e853 3f00 	ldrex	r3, [r3]
 8003446:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800344a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800344e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003452:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	330c      	adds	r3, #12
 800345c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003460:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003464:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003468:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800346c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003470:	e841 2300 	strex	r3, r2, [r1]
 8003474:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003478:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1d9      	bne.n	8003434 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	3314      	adds	r3, #20
 8003486:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003488:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800348a:	e853 3f00 	ldrex	r3, [r3]
 800348e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003490:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003492:	f023 0301 	bic.w	r3, r3, #1
 8003496:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	3314      	adds	r3, #20
 80034a0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80034a4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80034a8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034aa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80034ac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80034b0:	e841 2300 	strex	r3, r2, [r1]
 80034b4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80034b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1e1      	bne.n	8003480 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	3314      	adds	r3, #20
 80034c2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034c6:	e853 3f00 	ldrex	r3, [r3]
 80034ca:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80034cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	3314      	adds	r3, #20
 80034dc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80034e0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80034e2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80034e6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80034e8:	e841 2300 	strex	r3, r2, [r1]
 80034ec:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80034ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1e3      	bne.n	80034bc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2220      	movs	r2, #32
 80034f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	330c      	adds	r3, #12
 8003508:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800350a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800350c:	e853 3f00 	ldrex	r3, [r3]
 8003510:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003512:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003514:	f023 0310 	bic.w	r3, r3, #16
 8003518:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	330c      	adds	r3, #12
 8003522:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003526:	65ba      	str	r2, [r7, #88]	; 0x58
 8003528:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800352a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800352c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800352e:	e841 2300 	strex	r3, r2, [r1]
 8003532:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003534:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1e3      	bne.n	8003502 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800353e:	4618      	mov	r0, r3
 8003540:	f7fe f9db 	bl	80018fa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2202      	movs	r2, #2
 8003548:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003552:	b29b      	uxth	r3, r3
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	b29b      	uxth	r3, r3
 8003558:	4619      	mov	r1, r3
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 f8bf 	bl	80036de <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003560:	e09c      	b.n	800369c <HAL_UART_IRQHandler+0x518>
 8003562:	bf00      	nop
 8003564:	08003907 	.word	0x08003907
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003570:	b29b      	uxth	r3, r3
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800357c:	b29b      	uxth	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	f000 808e 	beq.w	80036a0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003584:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 8089 	beq.w	80036a0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	330c      	adds	r3, #12
 8003594:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003598:	e853 3f00 	ldrex	r3, [r3]
 800359c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800359e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	330c      	adds	r3, #12
 80035ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80035b2:	647a      	str	r2, [r7, #68]	; 0x44
 80035b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80035b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035ba:	e841 2300 	strex	r3, r2, [r1]
 80035be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80035c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1e3      	bne.n	800358e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	3314      	adds	r3, #20
 80035cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d0:	e853 3f00 	ldrex	r3, [r3]
 80035d4:	623b      	str	r3, [r7, #32]
   return(result);
 80035d6:	6a3b      	ldr	r3, [r7, #32]
 80035d8:	f023 0301 	bic.w	r3, r3, #1
 80035dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	3314      	adds	r3, #20
 80035e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80035ea:	633a      	str	r2, [r7, #48]	; 0x30
 80035ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035f2:	e841 2300 	strex	r3, r2, [r1]
 80035f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80035f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1e3      	bne.n	80035c6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2220      	movs	r2, #32
 8003602:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	330c      	adds	r3, #12
 8003612:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	e853 3f00 	ldrex	r3, [r3]
 800361a:	60fb      	str	r3, [r7, #12]
   return(result);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f023 0310 	bic.w	r3, r3, #16
 8003622:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	330c      	adds	r3, #12
 800362c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003630:	61fa      	str	r2, [r7, #28]
 8003632:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003634:	69b9      	ldr	r1, [r7, #24]
 8003636:	69fa      	ldr	r2, [r7, #28]
 8003638:	e841 2300 	strex	r3, r2, [r1]
 800363c:	617b      	str	r3, [r7, #20]
   return(result);
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d1e3      	bne.n	800360c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2202      	movs	r2, #2
 8003648:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800364a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800364e:	4619      	mov	r1, r3
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 f844 	bl	80036de <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003656:	e023      	b.n	80036a0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800365c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003660:	2b00      	cmp	r3, #0
 8003662:	d009      	beq.n	8003678 <HAL_UART_IRQHandler+0x4f4>
 8003664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800366c:	2b00      	cmp	r3, #0
 800366e:	d003      	beq.n	8003678 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 f95c 	bl	800392e <UART_Transmit_IT>
    return;
 8003676:	e014      	b.n	80036a2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800367c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00e      	beq.n	80036a2 <HAL_UART_IRQHandler+0x51e>
 8003684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800368c:	2b00      	cmp	r3, #0
 800368e:	d008      	beq.n	80036a2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f000 f99b 	bl	80039cc <UART_EndTransmit_IT>
    return;
 8003696:	e004      	b.n	80036a2 <HAL_UART_IRQHandler+0x51e>
    return;
 8003698:	bf00      	nop
 800369a:	e002      	b.n	80036a2 <HAL_UART_IRQHandler+0x51e>
      return;
 800369c:	bf00      	nop
 800369e:	e000      	b.n	80036a2 <HAL_UART_IRQHandler+0x51e>
      return;
 80036a0:	bf00      	nop
  }
}
 80036a2:	37e8      	adds	r7, #232	; 0xe8
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bc80      	pop	{r7}
 80036b8:	4770      	bx	lr

080036ba <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80036ba:	b480      	push	{r7}
 80036bc:	b083      	sub	sp, #12
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80036c2:	bf00      	nop
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bc80      	pop	{r7}
 80036ca:	4770      	bx	lr

080036cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	bc80      	pop	{r7}
 80036dc:	4770      	bx	lr

080036de <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80036de:	b480      	push	{r7}
 80036e0:	b083      	sub	sp, #12
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
 80036e6:	460b      	mov	r3, r1
 80036e8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bc80      	pop	{r7}
 80036f2:	4770      	bx	lr

080036f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b090      	sub	sp, #64	; 0x40
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	603b      	str	r3, [r7, #0]
 8003700:	4613      	mov	r3, r2
 8003702:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003704:	e050      	b.n	80037a8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003706:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800370c:	d04c      	beq.n	80037a8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800370e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003710:	2b00      	cmp	r3, #0
 8003712:	d007      	beq.n	8003724 <UART_WaitOnFlagUntilTimeout+0x30>
 8003714:	f7fd ffb6 	bl	8001684 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003720:	429a      	cmp	r2, r3
 8003722:	d241      	bcs.n	80037a8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	330c      	adds	r3, #12
 800372a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800372c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372e:	e853 3f00 	ldrex	r3, [r3]
 8003732:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003736:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800373a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	330c      	adds	r3, #12
 8003742:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003744:	637a      	str	r2, [r7, #52]	; 0x34
 8003746:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003748:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800374a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800374c:	e841 2300 	strex	r3, r2, [r1]
 8003750:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1e5      	bne.n	8003724 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	3314      	adds	r3, #20
 800375e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	e853 3f00 	ldrex	r3, [r3]
 8003766:	613b      	str	r3, [r7, #16]
   return(result);
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	f023 0301 	bic.w	r3, r3, #1
 800376e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	3314      	adds	r3, #20
 8003776:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003778:	623a      	str	r2, [r7, #32]
 800377a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800377c:	69f9      	ldr	r1, [r7, #28]
 800377e:	6a3a      	ldr	r2, [r7, #32]
 8003780:	e841 2300 	strex	r3, r2, [r1]
 8003784:	61bb      	str	r3, [r7, #24]
   return(result);
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1e5      	bne.n	8003758 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2220      	movs	r2, #32
 8003790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2220      	movs	r2, #32
 8003798:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e00f      	b.n	80037c8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	4013      	ands	r3, r2
 80037b2:	68ba      	ldr	r2, [r7, #8]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	bf0c      	ite	eq
 80037b8:	2301      	moveq	r3, #1
 80037ba:	2300      	movne	r3, #0
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	461a      	mov	r2, r3
 80037c0:	79fb      	ldrb	r3, [r7, #7]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d09f      	beq.n	8003706 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3740      	adds	r7, #64	; 0x40
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b085      	sub	sp, #20
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	4613      	mov	r3, r2
 80037dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	68ba      	ldr	r2, [r7, #8]
 80037e2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	88fa      	ldrh	r2, [r7, #6]
 80037e8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	88fa      	ldrh	r2, [r7, #6]
 80037ee:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2222      	movs	r2, #34	; 0x22
 80037fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d007      	beq.n	8003816 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68da      	ldr	r2, [r3, #12]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003814:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	695a      	ldr	r2, [r3, #20]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f042 0201 	orr.w	r2, r2, #1
 8003824:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68da      	ldr	r2, [r3, #12]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f042 0220 	orr.w	r2, r2, #32
 8003834:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3714      	adds	r7, #20
 800383c:	46bd      	mov	sp, r7
 800383e:	bc80      	pop	{r7}
 8003840:	4770      	bx	lr

08003842 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003842:	b480      	push	{r7}
 8003844:	b095      	sub	sp, #84	; 0x54
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	330c      	adds	r3, #12
 8003850:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003854:	e853 3f00 	ldrex	r3, [r3]
 8003858:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800385a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003860:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	330c      	adds	r3, #12
 8003868:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800386a:	643a      	str	r2, [r7, #64]	; 0x40
 800386c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800386e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003870:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003872:	e841 2300 	strex	r3, r2, [r1]
 8003876:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1e5      	bne.n	800384a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	3314      	adds	r3, #20
 8003884:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003886:	6a3b      	ldr	r3, [r7, #32]
 8003888:	e853 3f00 	ldrex	r3, [r3]
 800388c:	61fb      	str	r3, [r7, #28]
   return(result);
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	f023 0301 	bic.w	r3, r3, #1
 8003894:	64bb      	str	r3, [r7, #72]	; 0x48
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	3314      	adds	r3, #20
 800389c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800389e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038a6:	e841 2300 	strex	r3, r2, [r1]
 80038aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1e5      	bne.n	800387e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d119      	bne.n	80038ee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	330c      	adds	r3, #12
 80038c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	e853 3f00 	ldrex	r3, [r3]
 80038c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	f023 0310 	bic.w	r3, r3, #16
 80038d0:	647b      	str	r3, [r7, #68]	; 0x44
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	330c      	adds	r3, #12
 80038d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038da:	61ba      	str	r2, [r7, #24]
 80038dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038de:	6979      	ldr	r1, [r7, #20]
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	e841 2300 	strex	r3, r2, [r1]
 80038e6:	613b      	str	r3, [r7, #16]
   return(result);
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1e5      	bne.n	80038ba <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2220      	movs	r2, #32
 80038f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	631a      	str	r2, [r3, #48]	; 0x30
}
 80038fc:	bf00      	nop
 80038fe:	3754      	adds	r7, #84	; 0x54
 8003900:	46bd      	mov	sp, r7
 8003902:	bc80      	pop	{r7}
 8003904:	4770      	bx	lr

08003906 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	b084      	sub	sp, #16
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003912:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f7ff fed3 	bl	80036cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003926:	bf00      	nop
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800392e:	b480      	push	{r7}
 8003930:	b085      	sub	sp, #20
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b21      	cmp	r3, #33	; 0x21
 8003940:	d13e      	bne.n	80039c0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800394a:	d114      	bne.n	8003976 <UART_Transmit_IT+0x48>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d110      	bne.n	8003976 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a1b      	ldr	r3, [r3, #32]
 8003958:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	881b      	ldrh	r3, [r3, #0]
 800395e:	461a      	mov	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003968:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	1c9a      	adds	r2, r3, #2
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	621a      	str	r2, [r3, #32]
 8003974:	e008      	b.n	8003988 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	1c59      	adds	r1, r3, #1
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	6211      	str	r1, [r2, #32]
 8003980:	781a      	ldrb	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800398c:	b29b      	uxth	r3, r3
 800398e:	3b01      	subs	r3, #1
 8003990:	b29b      	uxth	r3, r3
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	4619      	mov	r1, r3
 8003996:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10f      	bne.n	80039bc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68da      	ldr	r2, [r3, #12]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039aa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68da      	ldr	r2, [r3, #12]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039ba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80039bc:	2300      	movs	r3, #0
 80039be:	e000      	b.n	80039c2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80039c0:	2302      	movs	r3, #2
  }
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3714      	adds	r7, #20
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bc80      	pop	{r7}
 80039ca:	4770      	bx	lr

080039cc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68da      	ldr	r2, [r3, #12]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039e2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2220      	movs	r2, #32
 80039e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f7ff fe5b 	bl	80036a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3708      	adds	r7, #8
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b08c      	sub	sp, #48	; 0x30
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	2b22      	cmp	r3, #34	; 0x22
 8003a0e:	f040 80ae 	bne.w	8003b6e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a1a:	d117      	bne.n	8003a4c <UART_Receive_IT+0x50>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d113      	bne.n	8003a4c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003a24:	2300      	movs	r3, #0
 8003a26:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a3a:	b29a      	uxth	r2, r3
 8003a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a44:	1c9a      	adds	r2, r3, #2
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	629a      	str	r2, [r3, #40]	; 0x28
 8003a4a:	e026      	b.n	8003a9a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a50:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003a52:	2300      	movs	r3, #0
 8003a54:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a5e:	d007      	beq.n	8003a70 <UART_Receive_IT+0x74>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d10a      	bne.n	8003a7e <UART_Receive_IT+0x82>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d106      	bne.n	8003a7e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	b2da      	uxtb	r2, r3
 8003a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a7a:	701a      	strb	r2, [r3, #0]
 8003a7c:	e008      	b.n	8003a90 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a8a:	b2da      	uxtb	r2, r3
 8003a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a8e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a94:	1c5a      	adds	r2, r3, #1
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d15d      	bne.n	8003b6a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68da      	ldr	r2, [r3, #12]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 0220 	bic.w	r2, r2, #32
 8003abc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68da      	ldr	r2, [r3, #12]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003acc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	695a      	ldr	r2, [r3, #20]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f022 0201 	bic.w	r2, r2, #1
 8003adc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d135      	bne.n	8003b60 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	330c      	adds	r3, #12
 8003b00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	e853 3f00 	ldrex	r3, [r3]
 8003b08:	613b      	str	r3, [r7, #16]
   return(result);
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	f023 0310 	bic.w	r3, r3, #16
 8003b10:	627b      	str	r3, [r7, #36]	; 0x24
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	330c      	adds	r3, #12
 8003b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b1a:	623a      	str	r2, [r7, #32]
 8003b1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b1e:	69f9      	ldr	r1, [r7, #28]
 8003b20:	6a3a      	ldr	r2, [r7, #32]
 8003b22:	e841 2300 	strex	r3, r2, [r1]
 8003b26:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1e5      	bne.n	8003afa <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0310 	and.w	r3, r3, #16
 8003b38:	2b10      	cmp	r3, #16
 8003b3a:	d10a      	bne.n	8003b52 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	60fb      	str	r3, [r7, #12]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	60fb      	str	r3, [r7, #12]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	60fb      	str	r3, [r7, #12]
 8003b50:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b56:	4619      	mov	r1, r3
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f7ff fdc0 	bl	80036de <HAL_UARTEx_RxEventCallback>
 8003b5e:	e002      	b.n	8003b66 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f7ff fdaa 	bl	80036ba <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003b66:	2300      	movs	r3, #0
 8003b68:	e002      	b.n	8003b70 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	e000      	b.n	8003b70 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003b6e:	2302      	movs	r3, #2
  }
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3730      	adds	r7, #48	; 0x30
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	68da      	ldr	r2, [r3, #12]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	430a      	orrs	r2, r1
 8003b94:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	689a      	ldr	r2, [r3, #8]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003bb2:	f023 030c 	bic.w	r3, r3, #12
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	6812      	ldr	r2, [r2, #0]
 8003bba:	68b9      	ldr	r1, [r7, #8]
 8003bbc:	430b      	orrs	r3, r1
 8003bbe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	699a      	ldr	r2, [r3, #24]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a2c      	ldr	r2, [pc, #176]	; (8003c8c <UART_SetConfig+0x114>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d103      	bne.n	8003be8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003be0:	f7fe fce8 	bl	80025b4 <HAL_RCC_GetPCLK2Freq>
 8003be4:	60f8      	str	r0, [r7, #12]
 8003be6:	e002      	b.n	8003bee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003be8:	f7fe fcd0 	bl	800258c <HAL_RCC_GetPCLK1Freq>
 8003bec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	4413      	add	r3, r2
 8003bf6:	009a      	lsls	r2, r3, #2
 8003bf8:	441a      	add	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c04:	4a22      	ldr	r2, [pc, #136]	; (8003c90 <UART_SetConfig+0x118>)
 8003c06:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0a:	095b      	lsrs	r3, r3, #5
 8003c0c:	0119      	lsls	r1, r3, #4
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	4613      	mov	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	4413      	add	r3, r2
 8003c16:	009a      	lsls	r2, r3, #2
 8003c18:	441a      	add	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c24:	4b1a      	ldr	r3, [pc, #104]	; (8003c90 <UART_SetConfig+0x118>)
 8003c26:	fba3 0302 	umull	r0, r3, r3, r2
 8003c2a:	095b      	lsrs	r3, r3, #5
 8003c2c:	2064      	movs	r0, #100	; 0x64
 8003c2e:	fb00 f303 	mul.w	r3, r0, r3
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	011b      	lsls	r3, r3, #4
 8003c36:	3332      	adds	r3, #50	; 0x32
 8003c38:	4a15      	ldr	r2, [pc, #84]	; (8003c90 <UART_SetConfig+0x118>)
 8003c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c3e:	095b      	lsrs	r3, r3, #5
 8003c40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c44:	4419      	add	r1, r3
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4413      	add	r3, r2
 8003c4e:	009a      	lsls	r2, r3, #2
 8003c50:	441a      	add	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c5c:	4b0c      	ldr	r3, [pc, #48]	; (8003c90 <UART_SetConfig+0x118>)
 8003c5e:	fba3 0302 	umull	r0, r3, r3, r2
 8003c62:	095b      	lsrs	r3, r3, #5
 8003c64:	2064      	movs	r0, #100	; 0x64
 8003c66:	fb00 f303 	mul.w	r3, r0, r3
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	011b      	lsls	r3, r3, #4
 8003c6e:	3332      	adds	r3, #50	; 0x32
 8003c70:	4a07      	ldr	r2, [pc, #28]	; (8003c90 <UART_SetConfig+0x118>)
 8003c72:	fba2 2303 	umull	r2, r3, r2, r3
 8003c76:	095b      	lsrs	r3, r3, #5
 8003c78:	f003 020f 	and.w	r2, r3, #15
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	440a      	add	r2, r1
 8003c82:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003c84:	bf00      	nop
 8003c86:	3710      	adds	r7, #16
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	40013800 	.word	0x40013800
 8003c90:	51eb851f 	.word	0x51eb851f

08003c94 <memset>:
 8003c94:	4603      	mov	r3, r0
 8003c96:	4402      	add	r2, r0
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d100      	bne.n	8003c9e <memset+0xa>
 8003c9c:	4770      	bx	lr
 8003c9e:	f803 1b01 	strb.w	r1, [r3], #1
 8003ca2:	e7f9      	b.n	8003c98 <memset+0x4>

08003ca4 <strcat>:
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	b510      	push	{r4, lr}
 8003ca8:	7814      	ldrb	r4, [r2, #0]
 8003caa:	4613      	mov	r3, r2
 8003cac:	3201      	adds	r2, #1
 8003cae:	2c00      	cmp	r4, #0
 8003cb0:	d1fa      	bne.n	8003ca8 <strcat+0x4>
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003cb8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003cbc:	2a00      	cmp	r2, #0
 8003cbe:	d1f9      	bne.n	8003cb4 <strcat+0x10>
 8003cc0:	bd10      	pop	{r4, pc}

08003cc2 <strstr>:
 8003cc2:	780a      	ldrb	r2, [r1, #0]
 8003cc4:	b570      	push	{r4, r5, r6, lr}
 8003cc6:	b96a      	cbnz	r2, 8003ce4 <strstr+0x22>
 8003cc8:	bd70      	pop	{r4, r5, r6, pc}
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d109      	bne.n	8003ce2 <strstr+0x20>
 8003cce:	460c      	mov	r4, r1
 8003cd0:	4605      	mov	r5, r0
 8003cd2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d0f6      	beq.n	8003cc8 <strstr+0x6>
 8003cda:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003cde:	429e      	cmp	r6, r3
 8003ce0:	d0f7      	beq.n	8003cd2 <strstr+0x10>
 8003ce2:	3001      	adds	r0, #1
 8003ce4:	7803      	ldrb	r3, [r0, #0]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1ef      	bne.n	8003cca <strstr+0x8>
 8003cea:	4618      	mov	r0, r3
 8003cec:	e7ec      	b.n	8003cc8 <strstr+0x6>
	...

08003cf0 <__libc_init_array>:
 8003cf0:	b570      	push	{r4, r5, r6, lr}
 8003cf2:	2600      	movs	r6, #0
 8003cf4:	4d0c      	ldr	r5, [pc, #48]	; (8003d28 <__libc_init_array+0x38>)
 8003cf6:	4c0d      	ldr	r4, [pc, #52]	; (8003d2c <__libc_init_array+0x3c>)
 8003cf8:	1b64      	subs	r4, r4, r5
 8003cfa:	10a4      	asrs	r4, r4, #2
 8003cfc:	42a6      	cmp	r6, r4
 8003cfe:	d109      	bne.n	8003d14 <__libc_init_array+0x24>
 8003d00:	f000 f81a 	bl	8003d38 <_init>
 8003d04:	2600      	movs	r6, #0
 8003d06:	4d0a      	ldr	r5, [pc, #40]	; (8003d30 <__libc_init_array+0x40>)
 8003d08:	4c0a      	ldr	r4, [pc, #40]	; (8003d34 <__libc_init_array+0x44>)
 8003d0a:	1b64      	subs	r4, r4, r5
 8003d0c:	10a4      	asrs	r4, r4, #2
 8003d0e:	42a6      	cmp	r6, r4
 8003d10:	d105      	bne.n	8003d1e <__libc_init_array+0x2e>
 8003d12:	bd70      	pop	{r4, r5, r6, pc}
 8003d14:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d18:	4798      	blx	r3
 8003d1a:	3601      	adds	r6, #1
 8003d1c:	e7ee      	b.n	8003cfc <__libc_init_array+0xc>
 8003d1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d22:	4798      	blx	r3
 8003d24:	3601      	adds	r6, #1
 8003d26:	e7f2      	b.n	8003d0e <__libc_init_array+0x1e>
 8003d28:	08003e28 	.word	0x08003e28
 8003d2c:	08003e28 	.word	0x08003e28
 8003d30:	08003e28 	.word	0x08003e28
 8003d34:	08003e2c 	.word	0x08003e2c

08003d38 <_init>:
 8003d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d3a:	bf00      	nop
 8003d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d3e:	bc08      	pop	{r3}
 8003d40:	469e      	mov	lr, r3
 8003d42:	4770      	bx	lr

08003d44 <_fini>:
 8003d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d46:	bf00      	nop
 8003d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d4a:	bc08      	pop	{r3}
 8003d4c:	469e      	mov	lr, r3
 8003d4e:	4770      	bx	lr
